// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameDB.proto

#ifndef PROTOBUF_GameDB_2eproto__INCLUDED
#define PROTOBUF_GameDB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

// Internal implementation detail -- do not call these.
void AEON_EXPORT protobuf_AddDesc_GameDB_2eproto();
void protobuf_AssignDesc_GameDB_2eproto();
void protobuf_ShutdownFile_GameDB_2eproto();

class GameDB;
class GameDB_GameDBDescriptor;

// ===================================================================

class AEON_EXPORT GameDB_GameDBDescriptor : public ::google::protobuf::Message {
 public:
  GameDB_GameDBDescriptor();
  virtual ~GameDB_GameDBDescriptor();
  
  GameDB_GameDBDescriptor(const GameDB_GameDBDescriptor& from);
  
  inline GameDB_GameDBDescriptor& operator=(const GameDB_GameDBDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameDB_GameDBDescriptor& default_instance();
  
  void Swap(GameDB_GameDBDescriptor* other);
  
  // implements Message ----------------------------------------------
  
  GameDB_GameDBDescriptor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameDB_GameDBDescriptor& from);
  void MergeFrom(const GameDB_GameDBDescriptor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  
  // optional fixed32 hash = 3;
  inline bool has_hash() const;
  inline void clear_hash();
  static const int kHashFieldNumber = 3;
  inline ::google::protobuf::uint32 hash() const;
  inline void set_hash(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.GameDB.GameDBDescriptor)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_hash();
  inline void clear_has_hash();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* date_;
  ::google::protobuf::uint32 hash_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_GameDB_2eproto();
  friend void protobuf_AssignDesc_GameDB_2eproto();
  friend void protobuf_ShutdownFile_GameDB_2eproto();
  
  void InitAsDefaultInstance();
  static GameDB_GameDBDescriptor* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT GameDB : public ::google::protobuf::Message {
 public:
  GameDB();
  virtual ~GameDB();
  
  GameDB(const GameDB& from);
  
  inline GameDB& operator=(const GameDB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameDB& default_instance();
  
  void Swap(GameDB* other);
  
  // implements Message ----------------------------------------------
  
  GameDB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameDB& from);
  void MergeFrom(const GameDB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef GameDB_GameDBDescriptor GameDBDescriptor;
  
  // accessors -------------------------------------------------------
  
  // required .Aeon.Serialize.GameDB.GameDBDescriptor game_db_descriptor = 1;
  inline bool has_game_db_descriptor() const;
  inline void clear_game_db_descriptor();
  static const int kGameDbDescriptorFieldNumber = 1;
  inline const ::Aeon::Serialize::GameDB_GameDBDescriptor& game_db_descriptor() const;
  inline ::Aeon::Serialize::GameDB_GameDBDescriptor* mutable_game_db_descriptor();
  inline ::Aeon::Serialize::GameDB_GameDBDescriptor* release_game_db_descriptor();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(GameDB)
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.GameDB)
 private:
  inline void set_has_game_db_descriptor();
  inline void clear_has_game_db_descriptor();
  
  ::google::protobuf::internal::ExtensionSet _extensions_;
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Aeon::Serialize::GameDB_GameDBDescriptor* game_db_descriptor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_GameDB_2eproto();
  friend void protobuf_AssignDesc_GameDB_2eproto();
  friend void protobuf_ShutdownFile_GameDB_2eproto();
  
  void InitAsDefaultInstance();
  static GameDB* default_instance_;
};
// ===================================================================


// ===================================================================

// GameDB_GameDBDescriptor

// required string name = 1;
inline bool GameDB_GameDBDescriptor::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameDB_GameDBDescriptor::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameDB_GameDBDescriptor::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameDB_GameDBDescriptor::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GameDB_GameDBDescriptor::name() const {
  return *name_;
}
inline void GameDB_GameDBDescriptor::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameDB_GameDBDescriptor::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GameDB_GameDBDescriptor::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameDB_GameDBDescriptor::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GameDB_GameDBDescriptor::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string date = 2;
inline bool GameDB_GameDBDescriptor::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameDB_GameDBDescriptor::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameDB_GameDBDescriptor::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameDB_GameDBDescriptor::clear_date() {
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& GameDB_GameDBDescriptor::date() const {
  return *date_;
}
inline void GameDB_GameDBDescriptor::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void GameDB_GameDBDescriptor::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(value);
}
inline void GameDB_GameDBDescriptor::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GameDB_GameDBDescriptor::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    date_ = new ::std::string;
  }
  return date_;
}
inline ::std::string* GameDB_GameDBDescriptor::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional fixed32 hash = 3;
inline bool GameDB_GameDBDescriptor::has_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameDB_GameDBDescriptor::set_has_hash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameDB_GameDBDescriptor::clear_has_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameDB_GameDBDescriptor::clear_hash() {
  hash_ = 0u;
  clear_has_hash();
}
inline ::google::protobuf::uint32 GameDB_GameDBDescriptor::hash() const {
  return hash_;
}
inline void GameDB_GameDBDescriptor::set_hash(::google::protobuf::uint32 value) {
  set_has_hash();
  hash_ = value;
}

// -------------------------------------------------------------------

// GameDB

// required .Aeon.Serialize.GameDB.GameDBDescriptor game_db_descriptor = 1;
inline bool GameDB::has_game_db_descriptor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameDB::set_has_game_db_descriptor() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameDB::clear_has_game_db_descriptor() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameDB::clear_game_db_descriptor() {
  if (game_db_descriptor_ != NULL) game_db_descriptor_->::Aeon::Serialize::GameDB_GameDBDescriptor::Clear();
  clear_has_game_db_descriptor();
}
inline const ::Aeon::Serialize::GameDB_GameDBDescriptor& GameDB::game_db_descriptor() const {
  return game_db_descriptor_ != NULL ? *game_db_descriptor_ : *default_instance_->game_db_descriptor_;
}
inline ::Aeon::Serialize::GameDB_GameDBDescriptor* GameDB::mutable_game_db_descriptor() {
  set_has_game_db_descriptor();
  if (game_db_descriptor_ == NULL) game_db_descriptor_ = new ::Aeon::Serialize::GameDB_GameDBDescriptor;
  return game_db_descriptor_;
}
inline ::Aeon::Serialize::GameDB_GameDBDescriptor* GameDB::release_game_db_descriptor() {
  clear_has_game_db_descriptor();
  ::Aeon::Serialize::GameDB_GameDBDescriptor* temp = game_db_descriptor_;
  game_db_descriptor_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameDB_2eproto__INCLUDED
