// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Value.proto

#ifndef PROTOBUF_Value_2eproto__INCLUDED
#define PROTOBUF_Value_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Datatypes.pb.h"
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

// Internal implementation detail -- do not call these.
void AEON_EXPORT protobuf_AddDesc_Value_2eproto();
void protobuf_AssignDesc_Value_2eproto();
void protobuf_ShutdownFile_Value_2eproto();

class Value;

// ===================================================================

class AEON_EXPORT Value : public ::google::protobuf::Message {
 public:
  Value();
  virtual ~Value();
  
  Value(const Value& from);
  
  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();
  
  void Swap(Value* other);
  
  // implements Message ----------------------------------------------
  
  Value* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes blob_value = 1;
  inline bool has_blob_value() const;
  inline void clear_blob_value();
  static const int kBlobValueFieldNumber = 1;
  inline const ::std::string& blob_value() const;
  inline void set_blob_value(const ::std::string& value);
  inline void set_blob_value(const char* value);
  inline void set_blob_value(const void* value, size_t size);
  inline ::std::string* mutable_blob_value();
  inline ::std::string* release_blob_value();
  
  // optional bool boolean_value = 2;
  inline bool has_boolean_value() const;
  inline void clear_boolean_value();
  static const int kBooleanValueFieldNumber = 2;
  inline bool boolean_value() const;
  inline void set_boolean_value(bool value);
  
  // optional double double_value = 3;
  inline bool has_double_value() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  inline double double_value() const;
  inline void set_double_value(double value);
  
  // optional float float_value = 4;
  inline bool has_float_value() const;
  inline void clear_float_value();
  static const int kFloatValueFieldNumber = 4;
  inline float float_value() const;
  inline void set_float_value(float value);
  
  // optional int32 int_value = 5;
  inline bool has_int_value() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 5;
  inline ::google::protobuf::int32 int_value() const;
  inline void set_int_value(::google::protobuf::int32 value);
  
  // optional int64 long_value = 6;
  inline bool has_long_value() const;
  inline void clear_long_value();
  static const int kLongValueFieldNumber = 6;
  inline ::google::protobuf::int64 long_value() const;
  inline void set_long_value(::google::protobuf::int64 value);
  
  // optional .Aeon.Serialize.Quaternion quaternion_value = 7;
  inline bool has_quaternion_value() const;
  inline void clear_quaternion_value();
  static const int kQuaternionValueFieldNumber = 7;
  inline const ::Aeon::Serialize::Quaternion& quaternion_value() const;
  inline ::Aeon::Serialize::Quaternion* mutable_quaternion_value();
  inline ::Aeon::Serialize::Quaternion* release_quaternion_value();
  
  // optional string string_value = 8;
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 8;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  inline ::std::string* release_string_value();
  
  // optional .Aeon.Serialize.Vector2 vector2_value = 9;
  inline bool has_vector2_value() const;
  inline void clear_vector2_value();
  static const int kVector2ValueFieldNumber = 9;
  inline const ::Aeon::Serialize::Vector2& vector2_value() const;
  inline ::Aeon::Serialize::Vector2* mutable_vector2_value();
  inline ::Aeon::Serialize::Vector2* release_vector2_value();
  
  // optional .Aeon.Serialize.Vector3 vector3_value = 10;
  inline bool has_vector3_value() const;
  inline void clear_vector3_value();
  static const int kVector3ValueFieldNumber = 10;
  inline const ::Aeon::Serialize::Vector3& vector3_value() const;
  inline ::Aeon::Serialize::Vector3* mutable_vector3_value();
  inline ::Aeon::Serialize::Vector3* release_vector3_value();
  
  // optional .Aeon.Serialize.Vector4 vector4_value = 11;
  inline bool has_vector4_value() const;
  inline void clear_vector4_value();
  static const int kVector4ValueFieldNumber = 11;
  inline const ::Aeon::Serialize::Vector4& vector4_value() const;
  inline ::Aeon::Serialize::Vector4* mutable_vector4_value();
  inline ::Aeon::Serialize::Vector4* release_vector4_value();
  
  // optional .Aeon.Serialize.Matrix4x4 matrix4x4_value = 12;
  inline bool has_matrix4x4_value() const;
  inline void clear_matrix4x4_value();
  static const int kMatrix4X4ValueFieldNumber = 12;
  inline const ::Aeon::Serialize::Matrix4x4& matrix4x4_value() const;
  inline ::Aeon::Serialize::Matrix4x4* mutable_matrix4x4_value();
  inline ::Aeon::Serialize::Matrix4x4* release_matrix4x4_value();
  
  // optional .Aeon.Serialize.Range range_value = 13;
  inline bool has_range_value() const;
  inline void clear_range_value();
  static const int kRangeValueFieldNumber = 13;
  inline const ::Aeon::Serialize::Range& range_value() const;
  inline ::Aeon::Serialize::Range* mutable_range_value();
  inline ::Aeon::Serialize::Range* release_range_value();
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Value)
 private:
  inline void set_has_blob_value();
  inline void clear_has_blob_value();
  inline void set_has_boolean_value();
  inline void clear_has_boolean_value();
  inline void set_has_double_value();
  inline void clear_has_double_value();
  inline void set_has_float_value();
  inline void clear_has_float_value();
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_long_value();
  inline void clear_has_long_value();
  inline void set_has_quaternion_value();
  inline void clear_has_quaternion_value();
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_vector2_value();
  inline void clear_has_vector2_value();
  inline void set_has_vector3_value();
  inline void clear_has_vector3_value();
  inline void set_has_vector4_value();
  inline void clear_has_vector4_value();
  inline void set_has_matrix4x4_value();
  inline void clear_has_matrix4x4_value();
  inline void set_has_range_value();
  inline void clear_has_range_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* blob_value_;
  double double_value_;
  bool boolean_value_;
  float float_value_;
  ::google::protobuf::int64 long_value_;
  ::Aeon::Serialize::Quaternion* quaternion_value_;
  ::std::string* string_value_;
  ::Aeon::Serialize::Vector2* vector2_value_;
  ::Aeon::Serialize::Vector3* vector3_value_;
  ::Aeon::Serialize::Vector4* vector4_value_;
  ::Aeon::Serialize::Matrix4x4* matrix4x4_value_;
  ::Aeon::Serialize::Range* range_value_;
  ::google::protobuf::int32 int_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Value_2eproto();
  friend void protobuf_AssignDesc_Value_2eproto();
  friend void protobuf_ShutdownFile_Value_2eproto();
  
  void InitAsDefaultInstance();
  static Value* default_instance_;
};
// ===================================================================


// ===================================================================

// Value

// optional bytes blob_value = 1;
inline bool Value::has_blob_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Value::set_has_blob_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Value::clear_has_blob_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Value::clear_blob_value() {
  if (blob_value_ != &::google::protobuf::internal::kEmptyString) {
    blob_value_->clear();
  }
  clear_has_blob_value();
}
inline const ::std::string& Value::blob_value() const {
  return *blob_value_;
}
inline void Value::set_blob_value(const ::std::string& value) {
  set_has_blob_value();
  if (blob_value_ == &::google::protobuf::internal::kEmptyString) {
    blob_value_ = new ::std::string;
  }
  blob_value_->assign(value);
}
inline void Value::set_blob_value(const char* value) {
  set_has_blob_value();
  if (blob_value_ == &::google::protobuf::internal::kEmptyString) {
    blob_value_ = new ::std::string;
  }
  blob_value_->assign(value);
}
inline void Value::set_blob_value(const void* value, size_t size) {
  set_has_blob_value();
  if (blob_value_ == &::google::protobuf::internal::kEmptyString) {
    blob_value_ = new ::std::string;
  }
  blob_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_blob_value() {
  set_has_blob_value();
  if (blob_value_ == &::google::protobuf::internal::kEmptyString) {
    blob_value_ = new ::std::string;
  }
  return blob_value_;
}
inline ::std::string* Value::release_blob_value() {
  clear_has_blob_value();
  if (blob_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = blob_value_;
    blob_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool boolean_value = 2;
inline bool Value::has_boolean_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Value::set_has_boolean_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Value::clear_has_boolean_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Value::clear_boolean_value() {
  boolean_value_ = false;
  clear_has_boolean_value();
}
inline bool Value::boolean_value() const {
  return boolean_value_;
}
inline void Value::set_boolean_value(bool value) {
  set_has_boolean_value();
  boolean_value_ = value;
}

// optional double double_value = 3;
inline bool Value::has_double_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Value::set_has_double_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Value::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Value::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double Value::double_value() const {
  return double_value_;
}
inline void Value::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
}

// optional float float_value = 4;
inline bool Value::has_float_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Value::set_has_float_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Value::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Value::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float Value::float_value() const {
  return float_value_;
}
inline void Value::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
}

// optional int32 int_value = 5;
inline bool Value::has_int_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Value::set_has_int_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Value::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Value::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
inline ::google::protobuf::int32 Value::int_value() const {
  return int_value_;
}
inline void Value::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
}

// optional int64 long_value = 6;
inline bool Value::has_long_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Value::set_has_long_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Value::clear_has_long_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Value::clear_long_value() {
  long_value_ = GOOGLE_LONGLONG(0);
  clear_has_long_value();
}
inline ::google::protobuf::int64 Value::long_value() const {
  return long_value_;
}
inline void Value::set_long_value(::google::protobuf::int64 value) {
  set_has_long_value();
  long_value_ = value;
}

// optional .Aeon.Serialize.Quaternion quaternion_value = 7;
inline bool Value::has_quaternion_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Value::set_has_quaternion_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Value::clear_has_quaternion_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Value::clear_quaternion_value() {
  if (quaternion_value_ != NULL) quaternion_value_->::Aeon::Serialize::Quaternion::Clear();
  clear_has_quaternion_value();
}
inline const ::Aeon::Serialize::Quaternion& Value::quaternion_value() const {
  return quaternion_value_ != NULL ? *quaternion_value_ : *default_instance_->quaternion_value_;
}
inline ::Aeon::Serialize::Quaternion* Value::mutable_quaternion_value() {
  set_has_quaternion_value();
  if (quaternion_value_ == NULL) quaternion_value_ = new ::Aeon::Serialize::Quaternion;
  return quaternion_value_;
}
inline ::Aeon::Serialize::Quaternion* Value::release_quaternion_value() {
  clear_has_quaternion_value();
  ::Aeon::Serialize::Quaternion* temp = quaternion_value_;
  quaternion_value_ = NULL;
  return temp;
}

// optional string string_value = 8;
inline bool Value::has_string_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Value::set_has_string_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Value::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Value::clear_string_value() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    string_value_->clear();
  }
  clear_has_string_value();
}
inline const ::std::string& Value::string_value() const {
  return *string_value_;
}
inline void Value::set_string_value(const ::std::string& value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void Value::set_string_value(const char* value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void Value::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Value::mutable_string_value() {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  return string_value_;
}
inline ::std::string* Value::release_string_value() {
  clear_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_value_;
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .Aeon.Serialize.Vector2 vector2_value = 9;
inline bool Value::has_vector2_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Value::set_has_vector2_value() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Value::clear_has_vector2_value() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Value::clear_vector2_value() {
  if (vector2_value_ != NULL) vector2_value_->::Aeon::Serialize::Vector2::Clear();
  clear_has_vector2_value();
}
inline const ::Aeon::Serialize::Vector2& Value::vector2_value() const {
  return vector2_value_ != NULL ? *vector2_value_ : *default_instance_->vector2_value_;
}
inline ::Aeon::Serialize::Vector2* Value::mutable_vector2_value() {
  set_has_vector2_value();
  if (vector2_value_ == NULL) vector2_value_ = new ::Aeon::Serialize::Vector2;
  return vector2_value_;
}
inline ::Aeon::Serialize::Vector2* Value::release_vector2_value() {
  clear_has_vector2_value();
  ::Aeon::Serialize::Vector2* temp = vector2_value_;
  vector2_value_ = NULL;
  return temp;
}

// optional .Aeon.Serialize.Vector3 vector3_value = 10;
inline bool Value::has_vector3_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Value::set_has_vector3_value() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Value::clear_has_vector3_value() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Value::clear_vector3_value() {
  if (vector3_value_ != NULL) vector3_value_->::Aeon::Serialize::Vector3::Clear();
  clear_has_vector3_value();
}
inline const ::Aeon::Serialize::Vector3& Value::vector3_value() const {
  return vector3_value_ != NULL ? *vector3_value_ : *default_instance_->vector3_value_;
}
inline ::Aeon::Serialize::Vector3* Value::mutable_vector3_value() {
  set_has_vector3_value();
  if (vector3_value_ == NULL) vector3_value_ = new ::Aeon::Serialize::Vector3;
  return vector3_value_;
}
inline ::Aeon::Serialize::Vector3* Value::release_vector3_value() {
  clear_has_vector3_value();
  ::Aeon::Serialize::Vector3* temp = vector3_value_;
  vector3_value_ = NULL;
  return temp;
}

// optional .Aeon.Serialize.Vector4 vector4_value = 11;
inline bool Value::has_vector4_value() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Value::set_has_vector4_value() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Value::clear_has_vector4_value() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Value::clear_vector4_value() {
  if (vector4_value_ != NULL) vector4_value_->::Aeon::Serialize::Vector4::Clear();
  clear_has_vector4_value();
}
inline const ::Aeon::Serialize::Vector4& Value::vector4_value() const {
  return vector4_value_ != NULL ? *vector4_value_ : *default_instance_->vector4_value_;
}
inline ::Aeon::Serialize::Vector4* Value::mutable_vector4_value() {
  set_has_vector4_value();
  if (vector4_value_ == NULL) vector4_value_ = new ::Aeon::Serialize::Vector4;
  return vector4_value_;
}
inline ::Aeon::Serialize::Vector4* Value::release_vector4_value() {
  clear_has_vector4_value();
  ::Aeon::Serialize::Vector4* temp = vector4_value_;
  vector4_value_ = NULL;
  return temp;
}

// optional .Aeon.Serialize.Matrix4x4 matrix4x4_value = 12;
inline bool Value::has_matrix4x4_value() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Value::set_has_matrix4x4_value() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Value::clear_has_matrix4x4_value() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Value::clear_matrix4x4_value() {
  if (matrix4x4_value_ != NULL) matrix4x4_value_->::Aeon::Serialize::Matrix4x4::Clear();
  clear_has_matrix4x4_value();
}
inline const ::Aeon::Serialize::Matrix4x4& Value::matrix4x4_value() const {
  return matrix4x4_value_ != NULL ? *matrix4x4_value_ : *default_instance_->matrix4x4_value_;
}
inline ::Aeon::Serialize::Matrix4x4* Value::mutable_matrix4x4_value() {
  set_has_matrix4x4_value();
  if (matrix4x4_value_ == NULL) matrix4x4_value_ = new ::Aeon::Serialize::Matrix4x4;
  return matrix4x4_value_;
}
inline ::Aeon::Serialize::Matrix4x4* Value::release_matrix4x4_value() {
  clear_has_matrix4x4_value();
  ::Aeon::Serialize::Matrix4x4* temp = matrix4x4_value_;
  matrix4x4_value_ = NULL;
  return temp;
}

// optional .Aeon.Serialize.Range range_value = 13;
inline bool Value::has_range_value() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Value::set_has_range_value() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Value::clear_has_range_value() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Value::clear_range_value() {
  if (range_value_ != NULL) range_value_->::Aeon::Serialize::Range::Clear();
  clear_has_range_value();
}
inline const ::Aeon::Serialize::Range& Value::range_value() const {
  return range_value_ != NULL ? *range_value_ : *default_instance_->range_value_;
}
inline ::Aeon::Serialize::Range* Value::mutable_range_value() {
  set_has_range_value();
  if (range_value_ == NULL) range_value_ = new ::Aeon::Serialize::Range;
  return range_value_;
}
inline ::Aeon::Serialize::Range* Value::release_range_value() {
  clear_has_range_value();
  ::Aeon::Serialize::Range* temp = range_value_;
  range_value_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Value_2eproto__INCLUDED
