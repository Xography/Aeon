// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Attribute.proto

#ifndef PROTOBUF_Attribute_2eproto__INCLUDED
#define PROTOBUF_Attribute_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Value.pb.h"
#include "UUID.pb.h"
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

// Internal implementation detail -- do not call these.
void AEON_EXPORT protobuf_AddDesc_Attribute_2eproto();
void protobuf_AssignDesc_Attribute_2eproto();
void protobuf_ShutdownFile_Attribute_2eproto();

class Attribute;
class Attribute_Key;
class AttributeInstance;

enum AttributeType {
  BLOB = 1,
  BOOL = 2,
  DOUBLE = 3,
  FLOAT = 4,
  INT32 = 5,
  INT64 = 6,
  MATRIX4X4 = 7,
  QUATERNION = 8,
  RANGE = 9,
  STRING = 10,
  VECTOR2 = 11,
  VECTOR3 = 12,
  VECTOR4 = 13
};
AEON_EXPORT bool AttributeType_IsValid(int value);
const AttributeType AttributeType_MIN = BLOB;
const AttributeType AttributeType_MAX = VECTOR4;
const int AttributeType_ARRAYSIZE = AttributeType_MAX + 1;

AEON_EXPORT const ::google::protobuf::EnumDescriptor* AttributeType_descriptor();
inline const ::std::string& AttributeType_Name(AttributeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttributeType_descriptor(), value);
}
inline bool AttributeType_Parse(
    const ::std::string& name, AttributeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttributeType>(
    AttributeType_descriptor(), name, value);
}
// ===================================================================

class AEON_EXPORT Attribute_Key : public ::google::protobuf::Message {
 public:
  Attribute_Key();
  virtual ~Attribute_Key();
  
  Attribute_Key(const Attribute_Key& from);
  
  inline Attribute_Key& operator=(const Attribute_Key& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attribute_Key& default_instance();
  
  void Swap(Attribute_Key* other);
  
  // implements Message ----------------------------------------------
  
  Attribute_Key* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attribute_Key& from);
  void MergeFrom(const Attribute_Key& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Attribute.Key)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Attribute_2eproto();
  friend void protobuf_AssignDesc_Attribute_2eproto();
  friend void protobuf_ShutdownFile_Attribute_2eproto();
  
  void InitAsDefaultInstance();
  static Attribute_Key* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT Attribute : public ::google::protobuf::Message {
 public:
  Attribute();
  virtual ~Attribute();
  
  Attribute(const Attribute& from);
  
  inline Attribute& operator=(const Attribute& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attribute& default_instance();
  
  void Swap(Attribute* other);
  
  // implements Message ----------------------------------------------
  
  Attribute* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attribute& from);
  void MergeFrom(const Attribute& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Attribute_Key Key;
  
  // accessors -------------------------------------------------------
  
  // required .Aeon.Serialize.Attribute.Key key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::Aeon::Serialize::Attribute_Key& key() const;
  inline ::Aeon::Serialize::Attribute_Key* mutable_key();
  inline ::Aeon::Serialize::Attribute_Key* release_key();
  
  // required .Aeon.Serialize.Value value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::Aeon::Serialize::Value& value() const;
  inline ::Aeon::Serialize::Value* mutable_value();
  inline ::Aeon::Serialize::Value* release_value();
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Attribute)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Aeon::Serialize::Attribute_Key* key_;
  ::Aeon::Serialize::Value* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Attribute_2eproto();
  friend void protobuf_AssignDesc_Attribute_2eproto();
  friend void protobuf_ShutdownFile_Attribute_2eproto();
  
  void InitAsDefaultInstance();
  static Attribute* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT AttributeInstance : public ::google::protobuf::Message {
 public:
  AttributeInstance();
  virtual ~AttributeInstance();
  
  AttributeInstance(const AttributeInstance& from);
  
  inline AttributeInstance& operator=(const AttributeInstance& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttributeInstance& default_instance();
  
  void Swap(AttributeInstance* other);
  
  // implements Message ----------------------------------------------
  
  AttributeInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttributeInstance& from);
  void MergeFrom(const AttributeInstance& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required fixed32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);
  
  // required .Aeon.Serialize.Value value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::Aeon::Serialize::Value& value() const;
  inline ::Aeon::Serialize::Value* mutable_value();
  inline ::Aeon::Serialize::Value* release_value();
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.AttributeInstance)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Aeon::Serialize::Value* value_;
  ::google::protobuf::uint32 key_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Attribute_2eproto();
  friend void protobuf_AssignDesc_Attribute_2eproto();
  friend void protobuf_ShutdownFile_Attribute_2eproto();
  
  void InitAsDefaultInstance();
  static AttributeInstance* default_instance_;
};
// ===================================================================


// ===================================================================

// Attribute_Key

// required string name = 1;
inline bool Attribute_Key::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attribute_Key::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attribute_Key::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attribute_Key::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Attribute_Key::name() const {
  return *name_;
}
inline void Attribute_Key::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Attribute_Key::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Attribute_Key::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attribute_Key::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Attribute_Key::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Attribute

// required .Aeon.Serialize.Attribute.Key key = 1;
inline bool Attribute::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attribute::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attribute::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attribute::clear_key() {
  if (key_ != NULL) key_->::Aeon::Serialize::Attribute_Key::Clear();
  clear_has_key();
}
inline const ::Aeon::Serialize::Attribute_Key& Attribute::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::Aeon::Serialize::Attribute_Key* Attribute::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::Aeon::Serialize::Attribute_Key;
  return key_;
}
inline ::Aeon::Serialize::Attribute_Key* Attribute::release_key() {
  clear_has_key();
  ::Aeon::Serialize::Attribute_Key* temp = key_;
  key_ = NULL;
  return temp;
}

// required .Aeon.Serialize.Value value = 2;
inline bool Attribute::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attribute::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attribute::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attribute::clear_value() {
  if (value_ != NULL) value_->::Aeon::Serialize::Value::Clear();
  clear_has_value();
}
inline const ::Aeon::Serialize::Value& Attribute::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::Aeon::Serialize::Value* Attribute::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::Aeon::Serialize::Value;
  return value_;
}
inline ::Aeon::Serialize::Value* Attribute::release_value() {
  clear_has_value();
  ::Aeon::Serialize::Value* temp = value_;
  value_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AttributeInstance

// required fixed32 key = 1;
inline bool AttributeInstance::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttributeInstance::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttributeInstance::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttributeInstance::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 AttributeInstance::key() const {
  return key_;
}
inline void AttributeInstance::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// required .Aeon.Serialize.Value value = 2;
inline bool AttributeInstance::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttributeInstance::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttributeInstance::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttributeInstance::clear_value() {
  if (value_ != NULL) value_->::Aeon::Serialize::Value::Clear();
  clear_has_value();
}
inline const ::Aeon::Serialize::Value& AttributeInstance::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::Aeon::Serialize::Value* AttributeInstance::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::Aeon::Serialize::Value;
  return value_;
}
inline ::Aeon::Serialize::Value* AttributeInstance::release_value() {
  clear_has_value();
  ::Aeon::Serialize::Value* temp = value_;
  value_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< Aeon::Serialize::AttributeType>() {
  return Aeon::Serialize::AttributeType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Attribute_2eproto__INCLUDED
