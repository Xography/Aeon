// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Collections.proto

#ifndef PROTOBUF_Collections_2eproto__INCLUDED
#define PROTOBUF_Collections_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Datatypes.pb.h"
#include "Attribute.pb.h"
#include "Value.pb.h"
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

// Internal implementation detail -- do not call these.
void AEON_EXPORT protobuf_AddDesc_Collections_2eproto();
void protobuf_AssignDesc_Collections_2eproto();
void protobuf_ShutdownFile_Collections_2eproto();

class List;
class Map;
class Map_KeyValuePair;

// ===================================================================

class AEON_EXPORT List : public ::google::protobuf::Message {
 public:
  List();
  virtual ~List();
  
  List(const List& from);
  
  inline List& operator=(const List& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const List& default_instance();
  
  void Swap(List* other);
  
  // implements Message ----------------------------------------------
  
  List* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const List& from);
  void MergeFrom(const List& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Aeon.Serialize.Value value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::Aeon::Serialize::Value& value(int index) const;
  inline ::Aeon::Serialize::Value* mutable_value(int index);
  inline ::Aeon::Serialize::Value* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Value >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Value >*
      mutable_value();
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.List)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Value > value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Collections_2eproto();
  friend void protobuf_AssignDesc_Collections_2eproto();
  friend void protobuf_ShutdownFile_Collections_2eproto();
  
  void InitAsDefaultInstance();
  static List* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT Map_KeyValuePair : public ::google::protobuf::Message {
 public:
  Map_KeyValuePair();
  virtual ~Map_KeyValuePair();
  
  Map_KeyValuePair(const Map_KeyValuePair& from);
  
  inline Map_KeyValuePair& operator=(const Map_KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Map_KeyValuePair& default_instance();
  
  void Swap(Map_KeyValuePair* other);
  
  // implements Message ----------------------------------------------
  
  Map_KeyValuePair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map_KeyValuePair& from);
  void MergeFrom(const Map_KeyValuePair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Aeon.Serialize.Value key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::Aeon::Serialize::Value& key() const;
  inline ::Aeon::Serialize::Value* mutable_key();
  inline ::Aeon::Serialize::Value* release_key();
  
  // required .Aeon.Serialize.Value value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::Aeon::Serialize::Value& value() const;
  inline ::Aeon::Serialize::Value* mutable_value();
  inline ::Aeon::Serialize::Value* release_value();
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Map.KeyValuePair)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Aeon::Serialize::Value* key_;
  ::Aeon::Serialize::Value* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Collections_2eproto();
  friend void protobuf_AssignDesc_Collections_2eproto();
  friend void protobuf_ShutdownFile_Collections_2eproto();
  
  void InitAsDefaultInstance();
  static Map_KeyValuePair* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT Map : public ::google::protobuf::Message {
 public:
  Map();
  virtual ~Map();
  
  Map(const Map& from);
  
  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();
  
  void Swap(Map* other);
  
  // implements Message ----------------------------------------------
  
  Map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef Map_KeyValuePair KeyValuePair;
  
  // accessors -------------------------------------------------------
  
  // repeated .Aeon.Serialize.Map.KeyValuePair data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Aeon::Serialize::Map_KeyValuePair& data(int index) const;
  inline ::Aeon::Serialize::Map_KeyValuePair* mutable_data(int index);
  inline ::Aeon::Serialize::Map_KeyValuePair* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Map_KeyValuePair >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Map_KeyValuePair >*
      mutable_data();
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Map)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Map_KeyValuePair > data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Collections_2eproto();
  friend void protobuf_AssignDesc_Collections_2eproto();
  friend void protobuf_ShutdownFile_Collections_2eproto();
  
  void InitAsDefaultInstance();
  static Map* default_instance_;
};
// ===================================================================


// ===================================================================

// List

// repeated .Aeon.Serialize.Value value = 1;
inline int List::value_size() const {
  return value_.size();
}
inline void List::clear_value() {
  value_.Clear();
}
inline const ::Aeon::Serialize::Value& List::value(int index) const {
  return value_.Get(index);
}
inline ::Aeon::Serialize::Value* List::mutable_value(int index) {
  return value_.Mutable(index);
}
inline ::Aeon::Serialize::Value* List::add_value() {
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Value >&
List::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Value >*
List::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// Map_KeyValuePair

// required .Aeon.Serialize.Value key = 1;
inline bool Map_KeyValuePair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Map_KeyValuePair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Map_KeyValuePair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Map_KeyValuePair::clear_key() {
  if (key_ != NULL) key_->::Aeon::Serialize::Value::Clear();
  clear_has_key();
}
inline const ::Aeon::Serialize::Value& Map_KeyValuePair::key() const {
  return key_ != NULL ? *key_ : *default_instance_->key_;
}
inline ::Aeon::Serialize::Value* Map_KeyValuePair::mutable_key() {
  set_has_key();
  if (key_ == NULL) key_ = new ::Aeon::Serialize::Value;
  return key_;
}
inline ::Aeon::Serialize::Value* Map_KeyValuePair::release_key() {
  clear_has_key();
  ::Aeon::Serialize::Value* temp = key_;
  key_ = NULL;
  return temp;
}

// required .Aeon.Serialize.Value value = 2;
inline bool Map_KeyValuePair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Map_KeyValuePair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Map_KeyValuePair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Map_KeyValuePair::clear_value() {
  if (value_ != NULL) value_->::Aeon::Serialize::Value::Clear();
  clear_has_value();
}
inline const ::Aeon::Serialize::Value& Map_KeyValuePair::value() const {
  return value_ != NULL ? *value_ : *default_instance_->value_;
}
inline ::Aeon::Serialize::Value* Map_KeyValuePair::mutable_value() {
  set_has_value();
  if (value_ == NULL) value_ = new ::Aeon::Serialize::Value;
  return value_;
}
inline ::Aeon::Serialize::Value* Map_KeyValuePair::release_value() {
  clear_has_value();
  ::Aeon::Serialize::Value* temp = value_;
  value_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Map

// repeated .Aeon.Serialize.Map.KeyValuePair data = 1;
inline int Map::data_size() const {
  return data_.size();
}
inline void Map::clear_data() {
  data_.Clear();
}
inline const ::Aeon::Serialize::Map_KeyValuePair& Map::data(int index) const {
  return data_.Get(index);
}
inline ::Aeon::Serialize::Map_KeyValuePair* Map::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Aeon::Serialize::Map_KeyValuePair* Map::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Map_KeyValuePair >&
Map::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Aeon::Serialize::Map_KeyValuePair >*
Map::mutable_data() {
  return &data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Collections_2eproto__INCLUDED
