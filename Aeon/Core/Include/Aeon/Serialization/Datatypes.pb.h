// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Datatypes.proto

#ifndef PROTOBUF_Datatypes_2eproto__INCLUDED
#define PROTOBUF_Datatypes_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

// Internal implementation detail -- do not call these.
void AEON_EXPORT protobuf_AddDesc_Datatypes_2eproto();
void protobuf_AssignDesc_Datatypes_2eproto();
void protobuf_ShutdownFile_Datatypes_2eproto();

class Blob;
class Vector2;
class Vector3;
class Vector4;
class Quaternion;
class Matrix4x4;
class Range;

// ===================================================================

class AEON_EXPORT Blob : public ::google::protobuf::Message {
 public:
  Blob();
  virtual ~Blob();
  
  Blob(const Blob& from);
  
  inline Blob& operator=(const Blob& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Blob& default_instance();
  
  void Swap(Blob* other);
  
  // implements Message ----------------------------------------------
  
  Blob* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Blob& from);
  void MergeFrom(const Blob& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Blob)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Datatypes_2eproto();
  friend void protobuf_AssignDesc_Datatypes_2eproto();
  friend void protobuf_ShutdownFile_Datatypes_2eproto();
  
  void InitAsDefaultInstance();
  static Blob* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT Vector2 : public ::google::protobuf::Message {
 public:
  Vector2();
  virtual ~Vector2();
  
  Vector2(const Vector2& from);
  
  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2& default_instance();
  
  void Swap(Vector2* other);
  
  // implements Message ----------------------------------------------
  
  Vector2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2& from);
  void MergeFrom(const Vector2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Vector2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Datatypes_2eproto();
  friend void protobuf_AssignDesc_Datatypes_2eproto();
  friend void protobuf_ShutdownFile_Datatypes_2eproto();
  
  void InitAsDefaultInstance();
  static Vector2* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT Vector3 : public ::google::protobuf::Message {
 public:
  Vector3();
  virtual ~Vector3();
  
  Vector3(const Vector3& from);
  
  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();
  
  void Swap(Vector3* other);
  
  // implements Message ----------------------------------------------
  
  Vector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Datatypes_2eproto();
  friend void protobuf_AssignDesc_Datatypes_2eproto();
  friend void protobuf_ShutdownFile_Datatypes_2eproto();
  
  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT Vector4 : public ::google::protobuf::Message {
 public:
  Vector4();
  virtual ~Vector4();
  
  Vector4(const Vector4& from);
  
  inline Vector4& operator=(const Vector4& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector4& default_instance();
  
  void Swap(Vector4* other);
  
  // implements Message ----------------------------------------------
  
  Vector4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector4& from);
  void MergeFrom(const Vector4& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x0 = 1;
  inline bool has_x0() const;
  inline void clear_x0();
  static const int kX0FieldNumber = 1;
  inline float x0() const;
  inline void set_x0(float value);
  
  // required float x1 = 2;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 2;
  inline float x1() const;
  inline void set_x1(float value);
  
  // required float x2 = 3;
  inline bool has_x2() const;
  inline void clear_x2();
  static const int kX2FieldNumber = 3;
  inline float x2() const;
  inline void set_x2(float value);
  
  // required float x3 = 4;
  inline bool has_x3() const;
  inline void clear_x3();
  static const int kX3FieldNumber = 4;
  inline float x3() const;
  inline void set_x3(float value);
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Vector4)
 private:
  inline void set_has_x0();
  inline void clear_has_x0();
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_x2();
  inline void clear_has_x2();
  inline void set_has_x3();
  inline void clear_has_x3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x0_;
  float x1_;
  float x2_;
  float x3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Datatypes_2eproto();
  friend void protobuf_AssignDesc_Datatypes_2eproto();
  friend void protobuf_ShutdownFile_Datatypes_2eproto();
  
  void InitAsDefaultInstance();
  static Vector4* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT Quaternion : public ::google::protobuf::Message {
 public:
  Quaternion();
  virtual ~Quaternion();
  
  Quaternion(const Quaternion& from);
  
  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternion& default_instance();
  
  void Swap(Quaternion* other);
  
  // implements Message ----------------------------------------------
  
  Quaternion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // required float w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline float w() const;
  inline void set_w(float value);
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Quaternion)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  float w_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Datatypes_2eproto();
  friend void protobuf_AssignDesc_Datatypes_2eproto();
  friend void protobuf_ShutdownFile_Datatypes_2eproto();
  
  void InitAsDefaultInstance();
  static Quaternion* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT Matrix4x4 : public ::google::protobuf::Message {
 public:
  Matrix4x4();
  virtual ~Matrix4x4();
  
  Matrix4x4(const Matrix4x4& from);
  
  inline Matrix4x4& operator=(const Matrix4x4& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Matrix4x4& default_instance();
  
  void Swap(Matrix4x4* other);
  
  // implements Message ----------------------------------------------
  
  Matrix4x4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Matrix4x4& from);
  void MergeFrom(const Matrix4x4& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .Aeon.Serialize.Vector4 x0 = 1;
  inline bool has_x0() const;
  inline void clear_x0();
  static const int kX0FieldNumber = 1;
  inline const ::Aeon::Serialize::Vector4& x0() const;
  inline ::Aeon::Serialize::Vector4* mutable_x0();
  inline ::Aeon::Serialize::Vector4* release_x0();
  
  // required .Aeon.Serialize.Vector4 x1 = 2;
  inline bool has_x1() const;
  inline void clear_x1();
  static const int kX1FieldNumber = 2;
  inline const ::Aeon::Serialize::Vector4& x1() const;
  inline ::Aeon::Serialize::Vector4* mutable_x1();
  inline ::Aeon::Serialize::Vector4* release_x1();
  
  // required .Aeon.Serialize.Vector4 x2 = 3;
  inline bool has_x2() const;
  inline void clear_x2();
  static const int kX2FieldNumber = 3;
  inline const ::Aeon::Serialize::Vector4& x2() const;
  inline ::Aeon::Serialize::Vector4* mutable_x2();
  inline ::Aeon::Serialize::Vector4* release_x2();
  
  // required .Aeon.Serialize.Vector4 x3 = 4;
  inline bool has_x3() const;
  inline void clear_x3();
  static const int kX3FieldNumber = 4;
  inline const ::Aeon::Serialize::Vector4& x3() const;
  inline ::Aeon::Serialize::Vector4* mutable_x3();
  inline ::Aeon::Serialize::Vector4* release_x3();
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Matrix4x4)
 private:
  inline void set_has_x0();
  inline void clear_has_x0();
  inline void set_has_x1();
  inline void clear_has_x1();
  inline void set_has_x2();
  inline void clear_has_x2();
  inline void set_has_x3();
  inline void clear_has_x3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::Aeon::Serialize::Vector4* x0_;
  ::Aeon::Serialize::Vector4* x1_;
  ::Aeon::Serialize::Vector4* x2_;
  ::Aeon::Serialize::Vector4* x3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Datatypes_2eproto();
  friend void protobuf_AssignDesc_Datatypes_2eproto();
  friend void protobuf_ShutdownFile_Datatypes_2eproto();
  
  void InitAsDefaultInstance();
  static Matrix4x4* default_instance_;
};
// -------------------------------------------------------------------

class AEON_EXPORT Range : public ::google::protobuf::Message {
 public:
  Range();
  virtual ~Range();
  
  Range(const Range& from);
  
  inline Range& operator=(const Range& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Range& default_instance();
  
  void Swap(Range* other);
  
  // implements Message ----------------------------------------------
  
  Range* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Range& from);
  void MergeFrom(const Range& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline float start() const;
  inline void set_start(float value);
  
  // required float end = 2;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline float end() const;
  inline void set_end(float value);
  
  // required float value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline float value() const;
  inline void set_value(float value);
  
  // @@protoc_insertion_point(class_scope:Aeon.Serialize.Range)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float start_;
  float end_;
  float value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void AEON_EXPORT protobuf_AddDesc_Datatypes_2eproto();
  friend void protobuf_AssignDesc_Datatypes_2eproto();
  friend void protobuf_ShutdownFile_Datatypes_2eproto();
  
  void InitAsDefaultInstance();
  static Range* default_instance_;
};
// ===================================================================


// ===================================================================

// Blob

// required bytes value = 1;
inline bool Blob::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Blob::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Blob::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Blob::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Blob::value() const {
  return *value_;
}
inline void Blob::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Blob::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Blob::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Blob::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Blob::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Vector2

// required float x = 1;
inline bool Vector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector2::x() const {
  return x_;
}
inline void Vector2::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Vector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector2::y() const {
  return y_;
}
inline void Vector2::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// Vector3

// required float x = 1;
inline bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3::x() const {
  return x_;
}
inline void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3::y() const {
  return y_;
}
inline void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3::z() const {
  return z_;
}
inline void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// Vector4

// required float x0 = 1;
inline bool Vector4::has_x0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector4::set_has_x0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector4::clear_has_x0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector4::clear_x0() {
  x0_ = 0;
  clear_has_x0();
}
inline float Vector4::x0() const {
  return x0_;
}
inline void Vector4::set_x0(float value) {
  set_has_x0();
  x0_ = value;
}

// required float x1 = 2;
inline bool Vector4::has_x1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector4::set_has_x1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector4::clear_has_x1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector4::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
inline float Vector4::x1() const {
  return x1_;
}
inline void Vector4::set_x1(float value) {
  set_has_x1();
  x1_ = value;
}

// required float x2 = 3;
inline bool Vector4::has_x2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector4::set_has_x2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector4::clear_has_x2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector4::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
inline float Vector4::x2() const {
  return x2_;
}
inline void Vector4::set_x2(float value) {
  set_has_x2();
  x2_ = value;
}

// required float x3 = 4;
inline bool Vector4::has_x3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vector4::set_has_x3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vector4::clear_has_x3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vector4::clear_x3() {
  x3_ = 0;
  clear_has_x3();
}
inline float Vector4::x3() const {
  return x3_;
}
inline void Vector4::set_x3(float value) {
  set_has_x3();
  x3_ = value;
}

// -------------------------------------------------------------------

// Quaternion

// required float x = 1;
inline bool Quaternion::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quaternion::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quaternion::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quaternion::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Quaternion::x() const {
  return x_;
}
inline void Quaternion::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Quaternion::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quaternion::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quaternion::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quaternion::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Quaternion::y() const {
  return y_;
}
inline void Quaternion::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool Quaternion::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quaternion::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quaternion::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quaternion::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Quaternion::z() const {
  return z_;
}
inline void Quaternion::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required float w = 4;
inline bool Quaternion::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quaternion::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quaternion::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quaternion::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline float Quaternion::w() const {
  return w_;
}
inline void Quaternion::set_w(float value) {
  set_has_w();
  w_ = value;
}

// -------------------------------------------------------------------

// Matrix4x4

// required .Aeon.Serialize.Vector4 x0 = 1;
inline bool Matrix4x4::has_x0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Matrix4x4::set_has_x0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Matrix4x4::clear_has_x0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Matrix4x4::clear_x0() {
  if (x0_ != NULL) x0_->::Aeon::Serialize::Vector4::Clear();
  clear_has_x0();
}
inline const ::Aeon::Serialize::Vector4& Matrix4x4::x0() const {
  return x0_ != NULL ? *x0_ : *default_instance_->x0_;
}
inline ::Aeon::Serialize::Vector4* Matrix4x4::mutable_x0() {
  set_has_x0();
  if (x0_ == NULL) x0_ = new ::Aeon::Serialize::Vector4;
  return x0_;
}
inline ::Aeon::Serialize::Vector4* Matrix4x4::release_x0() {
  clear_has_x0();
  ::Aeon::Serialize::Vector4* temp = x0_;
  x0_ = NULL;
  return temp;
}

// required .Aeon.Serialize.Vector4 x1 = 2;
inline bool Matrix4x4::has_x1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Matrix4x4::set_has_x1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Matrix4x4::clear_has_x1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Matrix4x4::clear_x1() {
  if (x1_ != NULL) x1_->::Aeon::Serialize::Vector4::Clear();
  clear_has_x1();
}
inline const ::Aeon::Serialize::Vector4& Matrix4x4::x1() const {
  return x1_ != NULL ? *x1_ : *default_instance_->x1_;
}
inline ::Aeon::Serialize::Vector4* Matrix4x4::mutable_x1() {
  set_has_x1();
  if (x1_ == NULL) x1_ = new ::Aeon::Serialize::Vector4;
  return x1_;
}
inline ::Aeon::Serialize::Vector4* Matrix4x4::release_x1() {
  clear_has_x1();
  ::Aeon::Serialize::Vector4* temp = x1_;
  x1_ = NULL;
  return temp;
}

// required .Aeon.Serialize.Vector4 x2 = 3;
inline bool Matrix4x4::has_x2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Matrix4x4::set_has_x2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Matrix4x4::clear_has_x2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Matrix4x4::clear_x2() {
  if (x2_ != NULL) x2_->::Aeon::Serialize::Vector4::Clear();
  clear_has_x2();
}
inline const ::Aeon::Serialize::Vector4& Matrix4x4::x2() const {
  return x2_ != NULL ? *x2_ : *default_instance_->x2_;
}
inline ::Aeon::Serialize::Vector4* Matrix4x4::mutable_x2() {
  set_has_x2();
  if (x2_ == NULL) x2_ = new ::Aeon::Serialize::Vector4;
  return x2_;
}
inline ::Aeon::Serialize::Vector4* Matrix4x4::release_x2() {
  clear_has_x2();
  ::Aeon::Serialize::Vector4* temp = x2_;
  x2_ = NULL;
  return temp;
}

// required .Aeon.Serialize.Vector4 x3 = 4;
inline bool Matrix4x4::has_x3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Matrix4x4::set_has_x3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Matrix4x4::clear_has_x3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Matrix4x4::clear_x3() {
  if (x3_ != NULL) x3_->::Aeon::Serialize::Vector4::Clear();
  clear_has_x3();
}
inline const ::Aeon::Serialize::Vector4& Matrix4x4::x3() const {
  return x3_ != NULL ? *x3_ : *default_instance_->x3_;
}
inline ::Aeon::Serialize::Vector4* Matrix4x4::mutable_x3() {
  set_has_x3();
  if (x3_ == NULL) x3_ = new ::Aeon::Serialize::Vector4;
  return x3_;
}
inline ::Aeon::Serialize::Vector4* Matrix4x4::release_x3() {
  clear_has_x3();
  ::Aeon::Serialize::Vector4* temp = x3_;
  x3_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Range

// required float start = 1;
inline bool Range::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Range::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Range::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Range::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline float Range::start() const {
  return start_;
}
inline void Range::set_start(float value) {
  set_has_start();
  start_ = value;
}

// required float end = 2;
inline bool Range::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Range::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Range::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Range::clear_end() {
  end_ = 0;
  clear_has_end();
}
inline float Range::end() const {
  return end_;
}
inline void Range::set_end(float value) {
  set_has_end();
  end_ = value;
}

// required float value = 3;
inline bool Range::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Range::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Range::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Range::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline float Range::value() const {
  return value_;
}
inline void Range::set_value(float value) {
  set_has_value();
  value_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Datatypes_2eproto__INCLUDED
