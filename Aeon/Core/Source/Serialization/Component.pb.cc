// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Component.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

namespace {

const ::google::protobuf::Descriptor* ComponentDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComponentDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComponentDescriptor_Parameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComponentDescriptor_Parameter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ComponentDescriptor_ComponentType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ComponentInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComponentInstance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Component_2eproto() {
  protobuf_AddDesc_Component_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Component.proto");
  GOOGLE_CHECK(file != NULL);
  ComponentDescriptor_descriptor_ = file->message_type(0);
  static const int ComponentDescriptor_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor, parameters_),
  };
  ComponentDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComponentDescriptor_descriptor_,
      ComponentDescriptor::default_instance_,
      ComponentDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComponentDescriptor));
  ComponentDescriptor_Parameter_descriptor_ = ComponentDescriptor_descriptor_->nested_type(0);
  static const int ComponentDescriptor_Parameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor_Parameter, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor_Parameter, type_),
  };
  ComponentDescriptor_Parameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComponentDescriptor_Parameter_descriptor_,
      ComponentDescriptor_Parameter::default_instance_,
      ComponentDescriptor_Parameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor_Parameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentDescriptor_Parameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComponentDescriptor_Parameter));
  ComponentDescriptor_ComponentType_descriptor_ = ComponentDescriptor_descriptor_->enum_type(0);
  ComponentInstance_descriptor_ = file->message_type(1);
  static const int ComponentInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentInstance, this_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentInstance, descriptor_id_),
  };
  ComponentInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComponentInstance_descriptor_,
      ComponentInstance::default_instance_,
      ComponentInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComponentInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComponentInstance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Component_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComponentDescriptor_descriptor_, &ComponentDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComponentDescriptor_Parameter_descriptor_, &ComponentDescriptor_Parameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComponentInstance_descriptor_, &ComponentInstance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Component_2eproto() {
  delete ComponentDescriptor::default_instance_;
  delete ComponentDescriptor_reflection_;
  delete ComponentDescriptor_Parameter::default_instance_;
  delete ComponentDescriptor_Parameter_reflection_;
  delete ComponentInstance::default_instance_;
  delete ComponentInstance_reflection_;
}

void protobuf_AddDesc_Component_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Aeon::Serialize::protobuf_AddDesc_Attribute_2eproto();
  ::Aeon::Serialize::protobuf_AddDesc_UUID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Component.proto\022\016Aeon.Serialize\032\017Attri"
    "bute.proto\032\nUUID.proto\"\316\002\n\023ComponentDesc"
    "riptor\022 \n\002id\030\001 \002(\0132\024.Aeon.Serialize.UUID"
    "\022\014\n\004name\030\002 \002(\t\022\023\n\013description\030\003 \001(\t\022\?\n\004t"
    "ype\030\004 \002(\01621.Aeon.Serialize.ComponentDesc"
    "riptor.ComponentType\022A\n\nparameters\030\005 \003(\013"
    "2-.Aeon.Serialize.ComponentDescriptor.Pa"
    "rameter\032E\n\tParameter\022\013\n\003key\030\001 \002(\t\022+\n\004typ"
    "e\030\002 \002(\0162\035.Aeon.Serialize.AttributeType\"\'"
    "\n\rComponentType\022\n\n\006NATIVE\020\000\022\n\n\006SCRIPT\020\001\""
    "g\n\021ComponentInstance\022%\n\007this_id\030\001 \002(\0132\024."
    "Aeon.Serialize.UUID\022+\n\rdescriptor_id\030\002 \002"
    "(\0132\024.Aeon.Serialize.UUIDB\002H\001", 508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Component.proto", &protobuf_RegisterTypes);
  ComponentDescriptor::default_instance_ = new ComponentDescriptor();
  ComponentDescriptor_Parameter::default_instance_ = new ComponentDescriptor_Parameter();
  ComponentInstance::default_instance_ = new ComponentInstance();
  ComponentDescriptor::default_instance_->InitAsDefaultInstance();
  ComponentDescriptor_Parameter::default_instance_->InitAsDefaultInstance();
  ComponentInstance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Component_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Component_2eproto {
  StaticDescriptorInitializer_Component_2eproto() {
    protobuf_AddDesc_Component_2eproto();
  }
} static_descriptor_initializer_Component_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* ComponentDescriptor_ComponentType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentDescriptor_ComponentType_descriptor_;
}
bool ComponentDescriptor_ComponentType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ComponentDescriptor_ComponentType ComponentDescriptor::NATIVE;
const ComponentDescriptor_ComponentType ComponentDescriptor::SCRIPT;
const ComponentDescriptor_ComponentType ComponentDescriptor::ComponentType_MIN;
const ComponentDescriptor_ComponentType ComponentDescriptor::ComponentType_MAX;
const int ComponentDescriptor::ComponentType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ComponentDescriptor_Parameter::kKeyFieldNumber;
const int ComponentDescriptor_Parameter::kTypeFieldNumber;
#endif  // !_MSC_VER

ComponentDescriptor_Parameter::ComponentDescriptor_Parameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComponentDescriptor_Parameter::InitAsDefaultInstance() {
}

ComponentDescriptor_Parameter::ComponentDescriptor_Parameter(const ComponentDescriptor_Parameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComponentDescriptor_Parameter::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentDescriptor_Parameter::~ComponentDescriptor_Parameter() {
  SharedDtor();
}

void ComponentDescriptor_Parameter::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void ComponentDescriptor_Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentDescriptor_Parameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentDescriptor_Parameter_descriptor_;
}

const ComponentDescriptor_Parameter& ComponentDescriptor_Parameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Component_2eproto();  return *default_instance_;
}

ComponentDescriptor_Parameter* ComponentDescriptor_Parameter::default_instance_ = NULL;

ComponentDescriptor_Parameter* ComponentDescriptor_Parameter::New() const {
  return new ComponentDescriptor_Parameter;
}

void ComponentDescriptor_Parameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComponentDescriptor_Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .Aeon.Serialize.AttributeType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Aeon::Serialize::AttributeType_IsValid(value)) {
            set_type(static_cast< Aeon::Serialize::AttributeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComponentDescriptor_Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required .Aeon.Serialize.AttributeType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComponentDescriptor_Parameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required .Aeon.Serialize.AttributeType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComponentDescriptor_Parameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required .Aeon.Serialize.AttributeType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentDescriptor_Parameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComponentDescriptor_Parameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComponentDescriptor_Parameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComponentDescriptor_Parameter::MergeFrom(const ComponentDescriptor_Parameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComponentDescriptor_Parameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentDescriptor_Parameter::CopyFrom(const ComponentDescriptor_Parameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentDescriptor_Parameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ComponentDescriptor_Parameter::Swap(ComponentDescriptor_Parameter* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComponentDescriptor_Parameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComponentDescriptor_Parameter_descriptor_;
  metadata.reflection = ComponentDescriptor_Parameter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComponentDescriptor::kIdFieldNumber;
const int ComponentDescriptor::kNameFieldNumber;
const int ComponentDescriptor::kDescriptionFieldNumber;
const int ComponentDescriptor::kTypeFieldNumber;
const int ComponentDescriptor::kParametersFieldNumber;
#endif  // !_MSC_VER

ComponentDescriptor::ComponentDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComponentDescriptor::InitAsDefaultInstance() {
  id_ = const_cast< ::Aeon::Serialize::UUID*>(&::Aeon::Serialize::UUID::default_instance());
}

ComponentDescriptor::ComponentDescriptor(const ComponentDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComponentDescriptor::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentDescriptor::~ComponentDescriptor() {
  SharedDtor();
}

void ComponentDescriptor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void ComponentDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentDescriptor_descriptor_;
}

const ComponentDescriptor& ComponentDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Component_2eproto();  return *default_instance_;
}

ComponentDescriptor* ComponentDescriptor::default_instance_ = NULL;

ComponentDescriptor* ComponentDescriptor::New() const {
  return new ComponentDescriptor;
}

void ComponentDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Aeon::Serialize::UUID::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    type_ = 0;
  }
  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComponentDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aeon.Serialize.UUID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }
      
      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // required .Aeon.Serialize.ComponentDescriptor.ComponentType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Aeon::Serialize::ComponentDescriptor_ComponentType_IsValid(value)) {
            set_type(static_cast< ::Aeon::Serialize::ComponentDescriptor_ComponentType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parameters;
        break;
      }
      
      // repeated .Aeon.Serialize.ComponentDescriptor.Parameter parameters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_parameters;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComponentDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Aeon.Serialize.UUID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }
  
  // required .Aeon.Serialize.ComponentDescriptor.ComponentType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }
  
  // repeated .Aeon.Serialize.ComponentDescriptor.Parameter parameters = 5;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->parameters(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComponentDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Aeon.Serialize.UUID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }
  
  // required .Aeon.Serialize.ComponentDescriptor.ComponentType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }
  
  // repeated .Aeon.Serialize.ComponentDescriptor.Parameter parameters = 5;
  for (int i = 0; i < this->parameters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->parameters(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComponentDescriptor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aeon.Serialize.UUID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required .Aeon.Serialize.ComponentDescriptor.ComponentType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  // repeated .Aeon.Serialize.ComponentDescriptor.Parameter parameters = 5;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameters(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComponentDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComponentDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComponentDescriptor::MergeFrom(const ComponentDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Aeon::Serialize::UUID::MergeFrom(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComponentDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentDescriptor::CopyFrom(const ComponentDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  for (int i = 0; i < parameters_size(); i++) {
    if (!this->parameters(i).IsInitialized()) return false;
  }
  return true;
}

void ComponentDescriptor::Swap(ComponentDescriptor* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(type_, other->type_);
    parameters_.Swap(&other->parameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComponentDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComponentDescriptor_descriptor_;
  metadata.reflection = ComponentDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComponentInstance::kThisIdFieldNumber;
const int ComponentInstance::kDescriptorIdFieldNumber;
#endif  // !_MSC_VER

ComponentInstance::ComponentInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComponentInstance::InitAsDefaultInstance() {
  this_id_ = const_cast< ::Aeon::Serialize::UUID*>(&::Aeon::Serialize::UUID::default_instance());
  descriptor_id_ = const_cast< ::Aeon::Serialize::UUID*>(&::Aeon::Serialize::UUID::default_instance());
}

ComponentInstance::ComponentInstance(const ComponentInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComponentInstance::SharedCtor() {
  _cached_size_ = 0;
  this_id_ = NULL;
  descriptor_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentInstance::~ComponentInstance() {
  SharedDtor();
}

void ComponentInstance::SharedDtor() {
  if (this != default_instance_) {
    delete this_id_;
    delete descriptor_id_;
  }
}

void ComponentInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComponentInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComponentInstance_descriptor_;
}

const ComponentInstance& ComponentInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Component_2eproto();  return *default_instance_;
}

ComponentInstance* ComponentInstance::default_instance_ = NULL;

ComponentInstance* ComponentInstance::New() const {
  return new ComponentInstance;
}

void ComponentInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_this_id()) {
      if (this_id_ != NULL) this_id_->::Aeon::Serialize::UUID::Clear();
    }
    if (has_descriptor_id()) {
      if (descriptor_id_ != NULL) descriptor_id_->::Aeon::Serialize::UUID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComponentInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aeon.Serialize.UUID this_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_this_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_descriptor_id;
        break;
      }
      
      // required .Aeon.Serialize.UUID descriptor_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_descriptor_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_descriptor_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComponentInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Aeon.Serialize.UUID this_id = 1;
  if (has_this_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->this_id(), output);
  }
  
  // required .Aeon.Serialize.UUID descriptor_id = 2;
  if (has_descriptor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->descriptor_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComponentInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Aeon.Serialize.UUID this_id = 1;
  if (has_this_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->this_id(), target);
  }
  
  // required .Aeon.Serialize.UUID descriptor_id = 2;
  if (has_descriptor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->descriptor_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComponentInstance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aeon.Serialize.UUID this_id = 1;
    if (has_this_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->this_id());
    }
    
    // required .Aeon.Serialize.UUID descriptor_id = 2;
    if (has_descriptor_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->descriptor_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComponentInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComponentInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComponentInstance::MergeFrom(const ComponentInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_this_id()) {
      mutable_this_id()->::Aeon::Serialize::UUID::MergeFrom(from.this_id());
    }
    if (from.has_descriptor_id()) {
      mutable_descriptor_id()->::Aeon::Serialize::UUID::MergeFrom(from.descriptor_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComponentInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComponentInstance::CopyFrom(const ComponentInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_this_id()) {
    if (!this->this_id().IsInitialized()) return false;
  }
  if (has_descriptor_id()) {
    if (!this->descriptor_id().IsInitialized()) return false;
  }
  return true;
}

void ComponentInstance::Swap(ComponentInstance* other) {
  if (other != this) {
    std::swap(this_id_, other->this_id_);
    std::swap(descriptor_id_, other->descriptor_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComponentInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComponentInstance_descriptor_;
  metadata.reflection = ComponentInstance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

// @@protoc_insertion_point(global_scope)
