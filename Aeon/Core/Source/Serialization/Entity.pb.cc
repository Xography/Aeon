// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Entity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

namespace {

const ::google::protobuf::Descriptor* EntityDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityInstance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Entity_2eproto() {
  protobuf_AddDesc_Entity_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Entity.proto");
  GOOGLE_CHECK(file != NULL);
  EntityDescriptor_descriptor_ = file->message_type(0);
  static const int EntityDescriptor_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDescriptor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDescriptor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDescriptor, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDescriptor, subcat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDescriptor, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDescriptor, components_),
  };
  EntityDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityDescriptor_descriptor_,
      EntityDescriptor::default_instance_,
      EntityDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityDescriptor));
  EntityInstance_descriptor_ = file->message_type(1);
  static const int EntityInstance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityInstance, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityInstance, entity_descriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityInstance, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityInstance, components_),
  };
  EntityInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityInstance_descriptor_,
      EntityInstance::default_instance_,
      EntityInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityInstance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Entity_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityDescriptor_descriptor_, &EntityDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityInstance_descriptor_, &EntityInstance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Entity_2eproto() {
  delete EntityDescriptor::default_instance_;
  delete EntityDescriptor_reflection_;
  delete EntityInstance::default_instance_;
  delete EntityInstance_reflection_;
}

void protobuf_AddDesc_Entity_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Aeon::Serialize::protobuf_AddDesc_Datatypes_2eproto();
  ::Aeon::Serialize::protobuf_AddDesc_Attribute_2eproto();
  ::Aeon::Serialize::protobuf_AddDesc_Component_2eproto();
  ::Aeon::Serialize::protobuf_AddDesc_Value_2eproto();
  ::Aeon::Serialize::protobuf_AddDesc_UUID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Entity.proto\022\016Aeon.Serialize\032\017Datatype"
    "s.proto\032\017Attribute.proto\032\017Component.prot"
    "o\032\013Value.proto\032\nUUID.proto\"\351\001\n\020EntityDes"
    "criptor\022 \n\002id\030\001 \002(\0132\024.Aeon.Serialize.UUI"
    "D\022\014\n\004name\030\002 \002(\t\022&\n\010category\030\003 \002(\0132\024.Aeon"
    ".Serialize.UUID\022$\n\006subcat\030\004 \002(\0132\024.Aeon.S"
    "erialize.UUID\022-\n\nattributes\030\005 \003(\0132\031.Aeon"
    ".Serialize.Attribute\022(\n\ncomponents\030\006 \003(\013"
    "2\024.Aeon.Serialize.UUID\"\315\001\n\016EntityInstanc"
    "e\022 \n\002id\030\001 \002(\0132\024.Aeon.Serialize.UUID\022/\n\021e"
    "ntity_descriptor\030\002 \002(\0132\024.Aeon.Serialize."
    "UUID\0221\n\006values\030\003 \003(\0132!.Aeon.Serialize.At"
    "tributeInstance\0225\n\ncomponents\030\004 \003(\0132!.Ae"
    "on.Serialize.ComponentInstanceB\002H\001", 554);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Entity.proto", &protobuf_RegisterTypes);
  EntityDescriptor::default_instance_ = new EntityDescriptor();
  EntityInstance::default_instance_ = new EntityInstance();
  EntityDescriptor::default_instance_->InitAsDefaultInstance();
  EntityInstance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Entity_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Entity_2eproto {
  StaticDescriptorInitializer_Entity_2eproto() {
    protobuf_AddDesc_Entity_2eproto();
  }
} static_descriptor_initializer_Entity_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int EntityDescriptor::kIdFieldNumber;
const int EntityDescriptor::kNameFieldNumber;
const int EntityDescriptor::kCategoryFieldNumber;
const int EntityDescriptor::kSubcatFieldNumber;
const int EntityDescriptor::kAttributesFieldNumber;
const int EntityDescriptor::kComponentsFieldNumber;
#endif  // !_MSC_VER

EntityDescriptor::EntityDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityDescriptor::InitAsDefaultInstance() {
  id_ = const_cast< ::Aeon::Serialize::UUID*>(&::Aeon::Serialize::UUID::default_instance());
  category_ = const_cast< ::Aeon::Serialize::UUID*>(&::Aeon::Serialize::UUID::default_instance());
  subcat_ = const_cast< ::Aeon::Serialize::UUID*>(&::Aeon::Serialize::UUID::default_instance());
}

EntityDescriptor::EntityDescriptor(const EntityDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityDescriptor::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  category_ = NULL;
  subcat_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityDescriptor::~EntityDescriptor() {
  SharedDtor();
}

void EntityDescriptor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete id_;
    delete category_;
    delete subcat_;
  }
}

void EntityDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityDescriptor_descriptor_;
}

const EntityDescriptor& EntityDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Entity_2eproto();  return *default_instance_;
}

EntityDescriptor* EntityDescriptor::default_instance_ = NULL;

EntityDescriptor* EntityDescriptor::New() const {
  return new EntityDescriptor;
}

void EntityDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Aeon::Serialize::UUID::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_category()) {
      if (category_ != NULL) category_->::Aeon::Serialize::UUID::Clear();
    }
    if (has_subcat()) {
      if (subcat_ != NULL) subcat_->::Aeon::Serialize::UUID::Clear();
    }
  }
  attributes_.Clear();
  components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aeon.Serialize.UUID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_category;
        break;
      }
      
      // required .Aeon.Serialize.UUID category = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_category()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subcat;
        break;
      }
      
      // required .Aeon.Serialize.UUID subcat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subcat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subcat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attributes;
        break;
      }
      
      // repeated .Aeon.Serialize.Attribute attributes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attributes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attributes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attributes;
        if (input->ExpectTag(50)) goto parse_components;
        break;
      }
      
      // repeated .Aeon.Serialize.UUID components = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_components()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_components;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Aeon.Serialize.UUID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // required .Aeon.Serialize.UUID category = 3;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->category(), output);
  }
  
  // required .Aeon.Serialize.UUID subcat = 4;
  if (has_subcat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subcat(), output);
  }
  
  // repeated .Aeon.Serialize.Attribute attributes = 5;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attributes(i), output);
  }
  
  // repeated .Aeon.Serialize.UUID components = 6;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->components(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Aeon.Serialize.UUID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // required .Aeon.Serialize.UUID category = 3;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->category(), target);
  }
  
  // required .Aeon.Serialize.UUID subcat = 4;
  if (has_subcat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->subcat(), target);
  }
  
  // repeated .Aeon.Serialize.Attribute attributes = 5;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attributes(i), target);
  }
  
  // repeated .Aeon.Serialize.UUID components = 6;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->components(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityDescriptor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aeon.Serialize.UUID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .Aeon.Serialize.UUID category = 3;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->category());
    }
    
    // required .Aeon.Serialize.UUID subcat = 4;
    if (has_subcat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subcat());
    }
    
  }
  // repeated .Aeon.Serialize.Attribute attributes = 5;
  total_size += 1 * this->attributes_size();
  for (int i = 0; i < this->attributes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attributes(i));
  }
  
  // repeated .Aeon.Serialize.UUID components = 6;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityDescriptor::MergeFrom(const EntityDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributes_.MergeFrom(from.attributes_);
  components_.MergeFrom(from.components_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Aeon::Serialize::UUID::MergeFrom(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_category()) {
      mutable_category()->::Aeon::Serialize::UUID::MergeFrom(from.category());
    }
    if (from.has_subcat()) {
      mutable_subcat()->::Aeon::Serialize::UUID::MergeFrom(from.subcat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityDescriptor::CopyFrom(const EntityDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_category()) {
    if (!this->category().IsInitialized()) return false;
  }
  if (has_subcat()) {
    if (!this->subcat().IsInitialized()) return false;
  }
  for (int i = 0; i < attributes_size(); i++) {
    if (!this->attributes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < components_size(); i++) {
    if (!this->components(i).IsInitialized()) return false;
  }
  return true;
}

void EntityDescriptor::Swap(EntityDescriptor* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(category_, other->category_);
    std::swap(subcat_, other->subcat_);
    attributes_.Swap(&other->attributes_);
    components_.Swap(&other->components_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityDescriptor_descriptor_;
  metadata.reflection = EntityDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntityInstance::kIdFieldNumber;
const int EntityInstance::kEntityDescriptorFieldNumber;
const int EntityInstance::kValuesFieldNumber;
const int EntityInstance::kComponentsFieldNumber;
#endif  // !_MSC_VER

EntityInstance::EntityInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityInstance::InitAsDefaultInstance() {
  id_ = const_cast< ::Aeon::Serialize::UUID*>(&::Aeon::Serialize::UUID::default_instance());
  entity_descriptor_ = const_cast< ::Aeon::Serialize::UUID*>(&::Aeon::Serialize::UUID::default_instance());
}

EntityInstance::EntityInstance(const EntityInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityInstance::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  entity_descriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityInstance::~EntityInstance() {
  SharedDtor();
}

void EntityInstance::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete entity_descriptor_;
  }
}

void EntityInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityInstance_descriptor_;
}

const EntityInstance& EntityInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Entity_2eproto();  return *default_instance_;
}

EntityInstance* EntityInstance::default_instance_ = NULL;

EntityInstance* EntityInstance::New() const {
  return new EntityInstance;
}

void EntityInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Aeon::Serialize::UUID::Clear();
    }
    if (has_entity_descriptor()) {
      if (entity_descriptor_ != NULL) entity_descriptor_->::Aeon::Serialize::UUID::Clear();
    }
  }
  values_.Clear();
  components_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aeon.Serialize.UUID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity_descriptor;
        break;
      }
      
      // required .Aeon.Serialize.UUID entity_descriptor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity_descriptor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entity_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }
      
      // repeated .Aeon.Serialize.AttributeInstance values = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        if (input->ExpectTag(34)) goto parse_components;
        break;
      }
      
      // repeated .Aeon.Serialize.ComponentInstance components = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_components()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_components;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Aeon.Serialize.UUID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required .Aeon.Serialize.UUID entity_descriptor = 2;
  if (has_entity_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entity_descriptor(), output);
  }
  
  // repeated .Aeon.Serialize.AttributeInstance values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->values(i), output);
  }
  
  // repeated .Aeon.Serialize.ComponentInstance components = 4;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->components(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Aeon.Serialize.UUID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required .Aeon.Serialize.UUID entity_descriptor = 2;
  if (has_entity_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entity_descriptor(), target);
  }
  
  // repeated .Aeon.Serialize.AttributeInstance values = 3;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->values(i), target);
  }
  
  // repeated .Aeon.Serialize.ComponentInstance components = 4;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->components(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityInstance::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aeon.Serialize.UUID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required .Aeon.Serialize.UUID entity_descriptor = 2;
    if (has_entity_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entity_descriptor());
    }
    
  }
  // repeated .Aeon.Serialize.AttributeInstance values = 3;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }
  
  // repeated .Aeon.Serialize.ComponentInstance components = 4;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityInstance::MergeFrom(const EntityInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  components_.MergeFrom(from.components_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Aeon::Serialize::UUID::MergeFrom(from.id());
    }
    if (from.has_entity_descriptor()) {
      mutable_entity_descriptor()->::Aeon::Serialize::UUID::MergeFrom(from.entity_descriptor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityInstance::CopyFrom(const EntityInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_entity_descriptor()) {
    if (!this->entity_descriptor().IsInitialized()) return false;
  }
  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  for (int i = 0; i < components_size(); i++) {
    if (!this->components(i).IsInitialized()) return false;
  }
  return true;
}

void EntityInstance::Swap(EntityInstance* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(entity_descriptor_, other->entity_descriptor_);
    values_.Swap(&other->values_);
    components_.Swap(&other->components_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityInstance_descriptor_;
  metadata.reflection = EntityInstance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

// @@protoc_insertion_point(global_scope)
