// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EntityDB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

namespace {

const ::google::protobuf::Descriptor* CategoryDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CategoryDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntityDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntityDB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EntityDB_2eproto() {
  protobuf_AddDesc_EntityDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EntityDB.proto");
  GOOGLE_CHECK(file != NULL);
  CategoryDescriptor_descriptor_ = file->message_type(0);
  static const int CategoryDescriptor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescriptor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescriptor, name_),
  };
  CategoryDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CategoryDescriptor_descriptor_,
      CategoryDescriptor::default_instance_,
      CategoryDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CategoryDescriptor));
  DBDescriptor_descriptor_ = file->message_type(1);
  static const int DBDescriptor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBDescriptor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBDescriptor, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBDescriptor, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBDescriptor, modified_),
  };
  DBDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBDescriptor_descriptor_,
      DBDescriptor::default_instance_,
      DBDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBDescriptor));
  EntityDB_descriptor_ = file->message_type(2);
  static const int EntityDB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDB, dbdescriptor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDB, entities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDB, components_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDB, categories_),
  };
  EntityDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntityDB_descriptor_,
      EntityDB::default_instance_,
      EntityDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntityDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntityDB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EntityDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CategoryDescriptor_descriptor_, &CategoryDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBDescriptor_descriptor_, &DBDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntityDB_descriptor_, &EntityDB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EntityDB_2eproto() {
  delete CategoryDescriptor::default_instance_;
  delete CategoryDescriptor_reflection_;
  delete DBDescriptor::default_instance_;
  delete DBDescriptor_reflection_;
  delete EntityDB::default_instance_;
  delete EntityDB_reflection_;
}

void protobuf_AddDesc_EntityDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Aeon::Serialize::protobuf_AddDesc_Datatypes_2eproto();
  ::Aeon::Serialize::protobuf_AddDesc_Entity_2eproto();
  ::Aeon::Serialize::protobuf_AddDesc_Attribute_2eproto();
  ::Aeon::Serialize::protobuf_AddDesc_Component_2eproto();
  ::Aeon::Serialize::protobuf_AddDesc_UUID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016EntityDB.proto\022\016Aeon.Serialize\032\017Dataty"
    "pes.proto\032\014Entity.proto\032\017Attribute.proto"
    "\032\017Component.proto\032\nUUID.proto\"D\n\022Categor"
    "yDescriptor\022 \n\002id\030\001 \002(\0132\024.Aeon.Serialize"
    ".UUID\022\014\n\004name\030\002 \002(\t\"T\n\014DBDescriptor\022\014\n\004n"
    "ame\030\001 \002(\t\022\017\n\007version\030\002 \002(\t\022\023\n\013descriptio"
    "n\030\003 \002(\t\022\020\n\010modified\030\004 \002(\t\"\343\001\n\010EntityDB\0222"
    "\n\014dbDescriptor\030\001 \002(\0132\034.Aeon.Serialize.DB"
    "Descriptor\0222\n\010entities\030\002 \003(\0132 .Aeon.Seri"
    "alize.EntityDescriptor\0227\n\ncomponents\030\003 \003"
    "(\0132#.Aeon.Serialize.ComponentDescriptor\022"
    "6\n\ncategories\030\004 \003(\0132\".Aeon.Serialize.Cat"
    "egoryDescriptorB\002H\001", 499);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EntityDB.proto", &protobuf_RegisterTypes);
  CategoryDescriptor::default_instance_ = new CategoryDescriptor();
  DBDescriptor::default_instance_ = new DBDescriptor();
  EntityDB::default_instance_ = new EntityDB();
  CategoryDescriptor::default_instance_->InitAsDefaultInstance();
  DBDescriptor::default_instance_->InitAsDefaultInstance();
  EntityDB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EntityDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EntityDB_2eproto {
  StaticDescriptorInitializer_EntityDB_2eproto() {
    protobuf_AddDesc_EntityDB_2eproto();
  }
} static_descriptor_initializer_EntityDB_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CategoryDescriptor::kIdFieldNumber;
const int CategoryDescriptor::kNameFieldNumber;
#endif  // !_MSC_VER

CategoryDescriptor::CategoryDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CategoryDescriptor::InitAsDefaultInstance() {
  id_ = const_cast< ::Aeon::Serialize::UUID*>(&::Aeon::Serialize::UUID::default_instance());
}

CategoryDescriptor::CategoryDescriptor(const CategoryDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CategoryDescriptor::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CategoryDescriptor::~CategoryDescriptor() {
  SharedDtor();
}

void CategoryDescriptor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete id_;
  }
}

void CategoryDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoryDescriptor_descriptor_;
}

const CategoryDescriptor& CategoryDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntityDB_2eproto();  return *default_instance_;
}

CategoryDescriptor* CategoryDescriptor::default_instance_ = NULL;

CategoryDescriptor* CategoryDescriptor::New() const {
  return new CategoryDescriptor;
}

void CategoryDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Aeon::Serialize::UUID::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CategoryDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aeon.Serialize.UUID id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CategoryDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Aeon.Serialize.UUID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CategoryDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Aeon.Serialize.UUID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CategoryDescriptor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aeon.Serialize.UUID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CategoryDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CategoryDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CategoryDescriptor::MergeFrom(const CategoryDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Aeon::Serialize::UUID::MergeFrom(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CategoryDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryDescriptor::CopyFrom(const CategoryDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  return true;
}

void CategoryDescriptor::Swap(CategoryDescriptor* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CategoryDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CategoryDescriptor_descriptor_;
  metadata.reflection = CategoryDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBDescriptor::kNameFieldNumber;
const int DBDescriptor::kVersionFieldNumber;
const int DBDescriptor::kDescriptionFieldNumber;
const int DBDescriptor::kModifiedFieldNumber;
#endif  // !_MSC_VER

DBDescriptor::DBDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBDescriptor::InitAsDefaultInstance() {
}

DBDescriptor::DBDescriptor(const DBDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBDescriptor::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modified_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBDescriptor::~DBDescriptor() {
  SharedDtor();
}

void DBDescriptor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (modified_ != &::google::protobuf::internal::kEmptyString) {
    delete modified_;
  }
  if (this != default_instance_) {
  }
}

void DBDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBDescriptor_descriptor_;
}

const DBDescriptor& DBDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntityDB_2eproto();  return *default_instance_;
}

DBDescriptor* DBDescriptor::default_instance_ = NULL;

DBDescriptor* DBDescriptor::New() const {
  return new DBDescriptor;
}

void DBDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_modified()) {
      if (modified_ != &::google::protobuf::internal::kEmptyString) {
        modified_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }
      
      // required string version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }
      
      // required string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_modified;
        break;
      }
      
      // required string modified = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modified:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modified()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modified().data(), this->modified().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->version(), output);
  }
  
  // required string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }
  
  // required string modified = 4;
  if (has_modified()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modified().data(), this->modified().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->modified(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }
  
  // required string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }
  
  // required string modified = 4;
  if (has_modified()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modified().data(), this->modified().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->modified(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBDescriptor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // required string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required string modified = 4;
    if (has_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modified());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBDescriptor::MergeFrom(const DBDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_modified()) {
      set_modified(from.modified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBDescriptor::CopyFrom(const DBDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void DBDescriptor::Swap(DBDescriptor* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(version_, other->version_);
    std::swap(description_, other->description_);
    std::swap(modified_, other->modified_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBDescriptor_descriptor_;
  metadata.reflection = DBDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntityDB::kDbDescriptorFieldNumber;
const int EntityDB::kEntitiesFieldNumber;
const int EntityDB::kComponentsFieldNumber;
const int EntityDB::kCategoriesFieldNumber;
#endif  // !_MSC_VER

EntityDB::EntityDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntityDB::InitAsDefaultInstance() {
  dbdescriptor_ = const_cast< ::Aeon::Serialize::DBDescriptor*>(&::Aeon::Serialize::DBDescriptor::default_instance());
}

EntityDB::EntityDB(const EntityDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntityDB::SharedCtor() {
  _cached_size_ = 0;
  dbdescriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntityDB::~EntityDB() {
  SharedDtor();
}

void EntityDB::SharedDtor() {
  if (this != default_instance_) {
    delete dbdescriptor_;
  }
}

void EntityDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntityDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntityDB_descriptor_;
}

const EntityDB& EntityDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EntityDB_2eproto();  return *default_instance_;
}

EntityDB* EntityDB::default_instance_ = NULL;

EntityDB* EntityDB::New() const {
  return new EntityDB;
}

void EntityDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dbdescriptor()) {
      if (dbdescriptor_ != NULL) dbdescriptor_->::Aeon::Serialize::DBDescriptor::Clear();
    }
  }
  entities_.Clear();
  components_.Clear();
  categories_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntityDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aeon.Serialize.DBDescriptor dbDescriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dbdescriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entities;
        break;
      }
      
      // repeated .Aeon.Serialize.EntityDescriptor entities = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entities;
        if (input->ExpectTag(26)) goto parse_components;
        break;
      }
      
      // repeated .Aeon.Serialize.ComponentDescriptor components = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_components()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_components;
        if (input->ExpectTag(34)) goto parse_categories;
        break;
      }
      
      // repeated .Aeon.Serialize.CategoryDescriptor categories = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_categories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_categories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_categories;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntityDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Aeon.Serialize.DBDescriptor dbDescriptor = 1;
  if (has_dbdescriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dbdescriptor(), output);
  }
  
  // repeated .Aeon.Serialize.EntityDescriptor entities = 2;
  for (int i = 0; i < this->entities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entities(i), output);
  }
  
  // repeated .Aeon.Serialize.ComponentDescriptor components = 3;
  for (int i = 0; i < this->components_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->components(i), output);
  }
  
  // repeated .Aeon.Serialize.CategoryDescriptor categories = 4;
  for (int i = 0; i < this->categories_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->categories(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntityDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Aeon.Serialize.DBDescriptor dbDescriptor = 1;
  if (has_dbdescriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dbdescriptor(), target);
  }
  
  // repeated .Aeon.Serialize.EntityDescriptor entities = 2;
  for (int i = 0; i < this->entities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entities(i), target);
  }
  
  // repeated .Aeon.Serialize.ComponentDescriptor components = 3;
  for (int i = 0; i < this->components_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->components(i), target);
  }
  
  // repeated .Aeon.Serialize.CategoryDescriptor categories = 4;
  for (int i = 0; i < this->categories_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->categories(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntityDB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aeon.Serialize.DBDescriptor dbDescriptor = 1;
    if (has_dbdescriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dbdescriptor());
    }
    
  }
  // repeated .Aeon.Serialize.EntityDescriptor entities = 2;
  total_size += 1 * this->entities_size();
  for (int i = 0; i < this->entities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entities(i));
  }
  
  // repeated .Aeon.Serialize.ComponentDescriptor components = 3;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }
  
  // repeated .Aeon.Serialize.CategoryDescriptor categories = 4;
  total_size += 1 * this->categories_size();
  for (int i = 0; i < this->categories_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->categories(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntityDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntityDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntityDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntityDB::MergeFrom(const EntityDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  entities_.MergeFrom(from.entities_);
  components_.MergeFrom(from.components_);
  categories_.MergeFrom(from.categories_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dbdescriptor()) {
      mutable_dbdescriptor()->::Aeon::Serialize::DBDescriptor::MergeFrom(from.dbdescriptor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntityDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntityDB::CopyFrom(const EntityDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntityDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_dbdescriptor()) {
    if (!this->dbdescriptor().IsInitialized()) return false;
  }
  for (int i = 0; i < entities_size(); i++) {
    if (!this->entities(i).IsInitialized()) return false;
  }
  for (int i = 0; i < components_size(); i++) {
    if (!this->components(i).IsInitialized()) return false;
  }
  for (int i = 0; i < categories_size(); i++) {
    if (!this->categories(i).IsInitialized()) return false;
  }
  return true;
}

void EntityDB::Swap(EntityDB* other) {
  if (other != this) {
    std::swap(dbdescriptor_, other->dbdescriptor_);
    entities_.Swap(&other->entities_);
    components_.Swap(&other->components_);
    categories_.Swap(&other->categories_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntityDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntityDB_descriptor_;
  metadata.reflection = EntityDB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

// @@protoc_insertion_point(global_scope)
