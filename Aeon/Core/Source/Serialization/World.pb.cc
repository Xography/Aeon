// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "World.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

namespace {

const ::google::protobuf::Descriptor* World_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_World_2eproto() {
  protobuf_AddDesc_World_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "World.proto");
  GOOGLE_CHECK(file != NULL);
  World_descriptor_ = file->message_type(0);
  static const int World_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, world_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, entity_table_),
  };
  World_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_descriptor_,
      World::default_instance_,
      World_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_World_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_descriptor_, &World::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_World_2eproto() {
  delete World::default_instance_;
  delete World_reflection_;
}

void protobuf_AddDesc_World_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Aeon::Serialize::protobuf_AddDesc_Entity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013World.proto\022\016Aeon.Serialize\032\014Entity.pr"
    "oto\"\226\001\n\005World\022\022\n\nworld_name\030\001 \002(\t\022\021\n\ttim"
    "estamp\030\002 \002(\007\0220\n\010settings\030\003 \002(\0132\036.Aeon.Se"
    "rialize.EntityInstance\0224\n\014entity_table\030\004"
    " \003(\0132\036.Aeon.Serialize.EntityInstanceB\002H\001", 200);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "World.proto", &protobuf_RegisterTypes);
  World::default_instance_ = new World();
  World::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_World_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_World_2eproto {
  StaticDescriptorInitializer_World_2eproto() {
    protobuf_AddDesc_World_2eproto();
  }
} static_descriptor_initializer_World_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int World::kWorldNameFieldNumber;
const int World::kTimestampFieldNumber;
const int World::kSettingsFieldNumber;
const int World::kEntityTableFieldNumber;
#endif  // !_MSC_VER

World::World()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World::InitAsDefaultInstance() {
  settings_ = const_cast< ::Aeon::Serialize::EntityInstance*>(&::Aeon::Serialize::EntityInstance::default_instance());
}

World::World(const World& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World::SharedCtor() {
  _cached_size_ = 0;
  world_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0u;
  settings_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World::~World() {
  SharedDtor();
}

void World::SharedDtor() {
  if (world_name_ != &::google::protobuf::internal::kEmptyString) {
    delete world_name_;
  }
  if (this != default_instance_) {
    delete settings_;
  }
}

void World::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_descriptor_;
}

const World& World::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_World_2eproto();  return *default_instance_;
}

World* World::default_instance_ = NULL;

World* World::New() const {
  return new World;
}

void World::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_world_name()) {
      if (world_name_ != &::google::protobuf::internal::kEmptyString) {
        world_name_->clear();
      }
    }
    timestamp_ = 0u;
    if (has_settings()) {
      if (settings_ != NULL) settings_->::Aeon::Serialize::EntityInstance::Clear();
    }
  }
  entity_table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string world_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_world_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->world_name().data(), this->world_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_timestamp;
        break;
      }
      
      // required fixed32 timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_settings;
        break;
      }
      
      // required .Aeon.Serialize.EntityInstance settings = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_entity_table;
        break;
      }
      
      // repeated .Aeon.Serialize.EntityInstance entity_table = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entity_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_entity_table;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string world_name = 1;
  if (has_world_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->world_name().data(), this->world_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->world_name(), output);
  }
  
  // required fixed32 timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->timestamp(), output);
  }
  
  // required .Aeon.Serialize.EntityInstance settings = 3;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->settings(), output);
  }
  
  // repeated .Aeon.Serialize.EntityInstance entity_table = 4;
  for (int i = 0; i < this->entity_table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->entity_table(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string world_name = 1;
  if (has_world_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->world_name().data(), this->world_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->world_name(), target);
  }
  
  // required fixed32 timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->timestamp(), target);
  }
  
  // required .Aeon.Serialize.EntityInstance settings = 3;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->settings(), target);
  }
  
  // repeated .Aeon.Serialize.EntityInstance entity_table = 4;
  for (int i = 0; i < this->entity_table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->entity_table(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string world_name = 1;
    if (has_world_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->world_name());
    }
    
    // required fixed32 timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 4;
    }
    
    // required .Aeon.Serialize.EntityInstance settings = 3;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }
    
  }
  // repeated .Aeon.Serialize.EntityInstance entity_table = 4;
  total_size += 1 * this->entity_table_size();
  for (int i = 0; i < this->entity_table_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entity_table(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World::MergeFrom(const World& from) {
  GOOGLE_CHECK_NE(&from, this);
  entity_table_.MergeFrom(from.entity_table_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_world_name()) {
      set_world_name(from.world_name());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_settings()) {
      mutable_settings()->::Aeon::Serialize::EntityInstance::MergeFrom(from.settings());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World::CopyFrom(const World& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_settings()) {
    if (!this->settings().IsInitialized()) return false;
  }
  for (int i = 0; i < entity_table_size(); i++) {
    if (!this->entity_table(i).IsInitialized()) return false;
  }
  return true;
}

void World::Swap(World* other) {
  if (other != this) {
    std::swap(world_name_, other->world_name_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(settings_, other->settings_);
    entity_table_.Swap(&other->entity_table_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_descriptor_;
  metadata.reflection = World_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

// @@protoc_insertion_point(global_scope)
