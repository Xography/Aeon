// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameDB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

namespace {

const ::google::protobuf::Descriptor* GameDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameDB_GameDBDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameDB_GameDBDescriptor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameDB_2eproto() {
  protobuf_AddDesc_GameDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameDB.proto");
  GOOGLE_CHECK(file != NULL);
  GameDB_descriptor_ = file->message_type(0);
  static const int GameDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDB, game_db_descriptor_),
  };
  GameDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameDB_descriptor_,
      GameDB::default_instance_,
      GameDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDB, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDB, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameDB));
  GameDB_GameDBDescriptor_descriptor_ = GameDB_descriptor_->nested_type(0);
  static const int GameDB_GameDBDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDB_GameDBDescriptor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDB_GameDBDescriptor, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDB_GameDBDescriptor, hash_),
  };
  GameDB_GameDBDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameDB_GameDBDescriptor_descriptor_,
      GameDB_GameDBDescriptor::default_instance_,
      GameDB_GameDBDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDB_GameDBDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDB_GameDBDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameDB_GameDBDescriptor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameDB_descriptor_, &GameDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameDB_GameDBDescriptor_descriptor_, &GameDB_GameDBDescriptor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameDB_2eproto() {
  delete GameDB::default_instance_;
  delete GameDB_reflection_;
  delete GameDB_GameDBDescriptor::default_instance_;
  delete GameDB_GameDBDescriptor_reflection_;
}

void protobuf_AddDesc_GameDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014GameDB.proto\022\016Aeon.Serialize\"\225\001\n\006GameD"
    "B\022C\n\022game_db_descriptor\030\001 \002(\0132\'.Aeon.Ser"
    "ialize.GameDB.GameDBDescriptor\032<\n\020GameDB"
    "Descriptor\022\014\n\004name\030\001 \002(\t\022\014\n\004date\030\002 \002(\t\022\014"
    "\n\004hash\030\003 \001(\007*\010\0102\020\200\200\200\200\002B\002H\001", 186);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameDB.proto", &protobuf_RegisterTypes);
  GameDB::default_instance_ = new GameDB();
  GameDB_GameDBDescriptor::default_instance_ = new GameDB_GameDBDescriptor();
  GameDB::default_instance_->InitAsDefaultInstance();
  GameDB_GameDBDescriptor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameDB_2eproto {
  StaticDescriptorInitializer_GameDB_2eproto() {
    protobuf_AddDesc_GameDB_2eproto();
  }
} static_descriptor_initializer_GameDB_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GameDB_GameDBDescriptor::kNameFieldNumber;
const int GameDB_GameDBDescriptor::kDateFieldNumber;
const int GameDB_GameDBDescriptor::kHashFieldNumber;
#endif  // !_MSC_VER

GameDB_GameDBDescriptor::GameDB_GameDBDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameDB_GameDBDescriptor::InitAsDefaultInstance() {
}

GameDB_GameDBDescriptor::GameDB_GameDBDescriptor(const GameDB_GameDBDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameDB_GameDBDescriptor::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameDB_GameDBDescriptor::~GameDB_GameDBDescriptor() {
  SharedDtor();
}

void GameDB_GameDBDescriptor::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (this != default_instance_) {
  }
}

void GameDB_GameDBDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameDB_GameDBDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameDB_GameDBDescriptor_descriptor_;
}

const GameDB_GameDBDescriptor& GameDB_GameDBDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDB_2eproto();  return *default_instance_;
}

GameDB_GameDBDescriptor* GameDB_GameDBDescriptor::default_instance_ = NULL;

GameDB_GameDBDescriptor* GameDB_GameDBDescriptor::New() const {
  return new GameDB_GameDBDescriptor;
}

void GameDB_GameDBDescriptor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    hash_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameDB_GameDBDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_date;
        break;
      }
      
      // required string date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_hash;
        break;
      }
      
      // optional fixed32 hash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameDB_GameDBDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->date(), output);
  }
  
  // optional fixed32 hash = 3;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameDB_GameDBDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->date(), target);
  }
  
  // optional fixed32 hash = 3;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameDB_GameDBDescriptor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
    // optional fixed32 hash = 3;
    if (has_hash()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameDB_GameDBDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameDB_GameDBDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameDB_GameDBDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameDB_GameDBDescriptor::MergeFrom(const GameDB_GameDBDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameDB_GameDBDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDB_GameDBDescriptor::CopyFrom(const GameDB_GameDBDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDB_GameDBDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GameDB_GameDBDescriptor::Swap(GameDB_GameDBDescriptor* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(date_, other->date_);
    std::swap(hash_, other->hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameDB_GameDBDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameDB_GameDBDescriptor_descriptor_;
  metadata.reflection = GameDB_GameDBDescriptor_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameDB::kGameDbDescriptorFieldNumber;
#endif  // !_MSC_VER

GameDB::GameDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameDB::InitAsDefaultInstance() {
  game_db_descriptor_ = const_cast< ::Aeon::Serialize::GameDB_GameDBDescriptor*>(&::Aeon::Serialize::GameDB_GameDBDescriptor::default_instance());
}

GameDB::GameDB(const GameDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameDB::SharedCtor() {
  _cached_size_ = 0;
  game_db_descriptor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameDB::~GameDB() {
  SharedDtor();
}

void GameDB::SharedDtor() {
  if (this != default_instance_) {
    delete game_db_descriptor_;
  }
}

void GameDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameDB_descriptor_;
}

const GameDB& GameDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameDB_2eproto();  return *default_instance_;
}

GameDB* GameDB::default_instance_ = NULL;

GameDB* GameDB::New() const {
  return new GameDB;
}

void GameDB::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_game_db_descriptor()) {
      if (game_db_descriptor_ != NULL) game_db_descriptor_->::Aeon::Serialize::GameDB_GameDBDescriptor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Aeon.Serialize.GameDB.GameDBDescriptor game_db_descriptor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_db_descriptor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Aeon.Serialize.GameDB.GameDBDescriptor game_db_descriptor = 1;
  if (has_game_db_descriptor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->game_db_descriptor(), output);
  }
  
  // Extension range [50, 536870912)
  _extensions_.SerializeWithCachedSizes(
      50, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Aeon.Serialize.GameDB.GameDBDescriptor game_db_descriptor = 1;
  if (has_game_db_descriptor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->game_db_descriptor(), target);
  }
  
  // Extension range [50, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameDB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Aeon.Serialize.GameDB.GameDBDescriptor game_db_descriptor = 1;
    if (has_game_db_descriptor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_db_descriptor());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameDB::MergeFrom(const GameDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_db_descriptor()) {
      mutable_game_db_descriptor()->::Aeon::Serialize::GameDB_GameDBDescriptor::MergeFrom(from.game_db_descriptor());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDB::CopyFrom(const GameDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_game_db_descriptor()) {
    if (!this->game_db_descriptor().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void GameDB::Swap(GameDB* other) {
  if (other != this) {
    std::swap(game_db_descriptor_, other->game_db_descriptor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata GameDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameDB_descriptor_;
  metadata.reflection = GameDB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

// @@protoc_insertion_point(global_scope)
