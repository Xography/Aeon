// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Value.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Aeon {
namespace Serialize {

namespace {

const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Value_2eproto() {
  protobuf_AddDesc_Value_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Value.proto");
  GOOGLE_CHECK(file != NULL);
  Value_descriptor_ = file->message_type(0);
  static const int Value_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, blob_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, boolean_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, long_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, quaternion_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, vector2_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, vector3_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, vector4_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, matrix4x4_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, range_value_),
  };
  Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Value_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_descriptor_, &Value::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Value_2eproto() {
  delete Value::default_instance_;
  delete Value_reflection_;
}

void protobuf_AddDesc_Value_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Aeon::Serialize::protobuf_AddDesc_Datatypes_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Value.proto\022\016Aeon.Serialize\032\017Datatypes"
    ".proto\"\300\003\n\005Value\022\022\n\nblob_value\030\001 \001(\014\022\025\n\r"
    "boolean_value\030\002 \001(\010\022\024\n\014double_value\030\003 \001("
    "\001\022\023\n\013float_value\030\004 \001(\002\022\021\n\tint_value\030\005 \001("
    "\005\022\022\n\nlong_value\030\006 \001(\003\0224\n\020quaternion_valu"
    "e\030\007 \001(\0132\032.Aeon.Serialize.Quaternion\022\024\n\014s"
    "tring_value\030\010 \001(\t\022.\n\rvector2_value\030\t \001(\013"
    "2\027.Aeon.Serialize.Vector2\022.\n\rvector3_val"
    "ue\030\n \001(\0132\027.Aeon.Serialize.Vector3\022.\n\rvec"
    "tor4_value\030\013 \001(\0132\027.Aeon.Serialize.Vector"
    "4\0222\n\017matrix4x4_value\030\014 \001(\0132\031.Aeon.Serial"
    "ize.Matrix4x4\022*\n\013range_value\030\r \001(\0132\025.Aeo"
    "n.Serialize.RangeB\002H\001", 501);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Value.proto", &protobuf_RegisterTypes);
  Value::default_instance_ = new Value();
  Value::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Value_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Value_2eproto {
  StaticDescriptorInitializer_Value_2eproto() {
    protobuf_AddDesc_Value_2eproto();
  }
} static_descriptor_initializer_Value_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Value::kBlobValueFieldNumber;
const int Value::kBooleanValueFieldNumber;
const int Value::kDoubleValueFieldNumber;
const int Value::kFloatValueFieldNumber;
const int Value::kIntValueFieldNumber;
const int Value::kLongValueFieldNumber;
const int Value::kQuaternionValueFieldNumber;
const int Value::kStringValueFieldNumber;
const int Value::kVector2ValueFieldNumber;
const int Value::kVector3ValueFieldNumber;
const int Value::kVector4ValueFieldNumber;
const int Value::kMatrix4X4ValueFieldNumber;
const int Value::kRangeValueFieldNumber;
#endif  // !_MSC_VER

Value::Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value::InitAsDefaultInstance() {
  quaternion_value_ = const_cast< ::Aeon::Serialize::Quaternion*>(&::Aeon::Serialize::Quaternion::default_instance());
  vector2_value_ = const_cast< ::Aeon::Serialize::Vector2*>(&::Aeon::Serialize::Vector2::default_instance());
  vector3_value_ = const_cast< ::Aeon::Serialize::Vector3*>(&::Aeon::Serialize::Vector3::default_instance());
  vector4_value_ = const_cast< ::Aeon::Serialize::Vector4*>(&::Aeon::Serialize::Vector4::default_instance());
  matrix4x4_value_ = const_cast< ::Aeon::Serialize::Matrix4x4*>(&::Aeon::Serialize::Matrix4x4::default_instance());
  range_value_ = const_cast< ::Aeon::Serialize::Range*>(&::Aeon::Serialize::Range::default_instance());
}

Value::Value(const Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value::SharedCtor() {
  _cached_size_ = 0;
  blob_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boolean_value_ = false;
  double_value_ = 0;
  float_value_ = 0;
  int_value_ = 0;
  long_value_ = GOOGLE_LONGLONG(0);
  quaternion_value_ = NULL;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vector2_value_ = NULL;
  vector3_value_ = NULL;
  vector4_value_ = NULL;
  matrix4x4_value_ = NULL;
  range_value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  SharedDtor();
}

void Value::SharedDtor() {
  if (blob_value_ != &::google::protobuf::internal::kEmptyString) {
    delete blob_value_;
  }
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (this != default_instance_) {
    delete quaternion_value_;
    delete vector2_value_;
    delete vector3_value_;
    delete vector4_value_;
    delete matrix4x4_value_;
    delete range_value_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Value_2eproto();  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New() const {
  return new Value;
}

void Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_blob_value()) {
      if (blob_value_ != &::google::protobuf::internal::kEmptyString) {
        blob_value_->clear();
      }
    }
    boolean_value_ = false;
    double_value_ = 0;
    float_value_ = 0;
    int_value_ = 0;
    long_value_ = GOOGLE_LONGLONG(0);
    if (has_quaternion_value()) {
      if (quaternion_value_ != NULL) quaternion_value_->::Aeon::Serialize::Quaternion::Clear();
    }
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_vector2_value()) {
      if (vector2_value_ != NULL) vector2_value_->::Aeon::Serialize::Vector2::Clear();
    }
    if (has_vector3_value()) {
      if (vector3_value_ != NULL) vector3_value_->::Aeon::Serialize::Vector3::Clear();
    }
    if (has_vector4_value()) {
      if (vector4_value_ != NULL) vector4_value_->::Aeon::Serialize::Vector4::Clear();
    }
    if (has_matrix4x4_value()) {
      if (matrix4x4_value_ != NULL) matrix4x4_value_->::Aeon::Serialize::Matrix4x4::Clear();
    }
    if (has_range_value()) {
      if (range_value_ != NULL) range_value_->::Aeon::Serialize::Range::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes blob_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boolean_value;
        break;
      }
      
      // optional bool boolean_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolean_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolean_value_)));
          set_has_boolean_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_double_value;
        break;
      }
      
      // optional double double_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_float_value;
        break;
      }
      
      // optional float float_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_int_value;
        break;
      }
      
      // optional int32 int_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_long_value;
        break;
      }
      
      // optional int64 long_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_long_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &long_value_)));
          set_has_long_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_quaternion_value;
        break;
      }
      
      // optional .Aeon.Serialize.Quaternion quaternion_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quaternion_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quaternion_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_string_value;
        break;
      }
      
      // optional string string_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), this->string_value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_vector2_value;
        break;
      }
      
      // optional .Aeon.Serialize.Vector2 vector2_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector2_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector2_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_vector3_value;
        break;
      }
      
      // optional .Aeon.Serialize.Vector3 vector3_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector3_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector3_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_vector4_value;
        break;
      }
      
      // optional .Aeon.Serialize.Vector4 vector4_value = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vector4_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector4_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_matrix4x4_value;
        break;
      }
      
      // optional .Aeon.Serialize.Matrix4x4 matrix4x4_value = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_matrix4x4_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrix4x4_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_range_value;
        break;
      }
      
      // optional .Aeon.Serialize.Range range_value = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_range_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes blob_value = 1;
  if (has_blob_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->blob_value(), output);
  }
  
  // optional bool boolean_value = 2;
  if (has_boolean_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->boolean_value(), output);
  }
  
  // optional double double_value = 3;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
  }
  
  // optional float float_value = 4;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_value(), output);
  }
  
  // optional int32 int_value = 5;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->int_value(), output);
  }
  
  // optional int64 long_value = 6;
  if (has_long_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->long_value(), output);
  }
  
  // optional .Aeon.Serialize.Quaternion quaternion_value = 7;
  if (has_quaternion_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->quaternion_value(), output);
  }
  
  // optional string string_value = 8;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->string_value(), output);
  }
  
  // optional .Aeon.Serialize.Vector2 vector2_value = 9;
  if (has_vector2_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->vector2_value(), output);
  }
  
  // optional .Aeon.Serialize.Vector3 vector3_value = 10;
  if (has_vector3_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vector3_value(), output);
  }
  
  // optional .Aeon.Serialize.Vector4 vector4_value = 11;
  if (has_vector4_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->vector4_value(), output);
  }
  
  // optional .Aeon.Serialize.Matrix4x4 matrix4x4_value = 12;
  if (has_matrix4x4_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->matrix4x4_value(), output);
  }
  
  // optional .Aeon.Serialize.Range range_value = 13;
  if (has_range_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->range_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes blob_value = 1;
  if (has_blob_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->blob_value(), target);
  }
  
  // optional bool boolean_value = 2;
  if (has_boolean_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->boolean_value(), target);
  }
  
  // optional double double_value = 3;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_value(), target);
  }
  
  // optional float float_value = 4;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_value(), target);
  }
  
  // optional int32 int_value = 5;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->int_value(), target);
  }
  
  // optional int64 long_value = 6;
  if (has_long_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->long_value(), target);
  }
  
  // optional .Aeon.Serialize.Quaternion quaternion_value = 7;
  if (has_quaternion_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->quaternion_value(), target);
  }
  
  // optional string string_value = 8;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), this->string_value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->string_value(), target);
  }
  
  // optional .Aeon.Serialize.Vector2 vector2_value = 9;
  if (has_vector2_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->vector2_value(), target);
  }
  
  // optional .Aeon.Serialize.Vector3 vector3_value = 10;
  if (has_vector3_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vector3_value(), target);
  }
  
  // optional .Aeon.Serialize.Vector4 vector4_value = 11;
  if (has_vector4_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->vector4_value(), target);
  }
  
  // optional .Aeon.Serialize.Matrix4x4 matrix4x4_value = 12;
  if (has_matrix4x4_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->matrix4x4_value(), target);
  }
  
  // optional .Aeon.Serialize.Range range_value = 13;
  if (has_range_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->range_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes blob_value = 1;
    if (has_blob_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blob_value());
    }
    
    // optional bool boolean_value = 2;
    if (has_boolean_value()) {
      total_size += 1 + 1;
    }
    
    // optional double double_value = 3;
    if (has_double_value()) {
      total_size += 1 + 8;
    }
    
    // optional float float_value = 4;
    if (has_float_value()) {
      total_size += 1 + 4;
    }
    
    // optional int32 int_value = 5;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }
    
    // optional int64 long_value = 6;
    if (has_long_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->long_value());
    }
    
    // optional .Aeon.Serialize.Quaternion quaternion_value = 7;
    if (has_quaternion_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quaternion_value());
    }
    
    // optional string string_value = 8;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Aeon.Serialize.Vector2 vector2_value = 9;
    if (has_vector2_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vector2_value());
    }
    
    // optional .Aeon.Serialize.Vector3 vector3_value = 10;
    if (has_vector3_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vector3_value());
    }
    
    // optional .Aeon.Serialize.Vector4 vector4_value = 11;
    if (has_vector4_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vector4_value());
    }
    
    // optional .Aeon.Serialize.Matrix4x4 matrix4x4_value = 12;
    if (has_matrix4x4_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->matrix4x4_value());
    }
    
    // optional .Aeon.Serialize.Range range_value = 13;
    if (has_range_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blob_value()) {
      set_blob_value(from.blob_value());
    }
    if (from.has_boolean_value()) {
      set_boolean_value(from.boolean_value());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_long_value()) {
      set_long_value(from.long_value());
    }
    if (from.has_quaternion_value()) {
      mutable_quaternion_value()->::Aeon::Serialize::Quaternion::MergeFrom(from.quaternion_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vector2_value()) {
      mutable_vector2_value()->::Aeon::Serialize::Vector2::MergeFrom(from.vector2_value());
    }
    if (from.has_vector3_value()) {
      mutable_vector3_value()->::Aeon::Serialize::Vector3::MergeFrom(from.vector3_value());
    }
    if (from.has_vector4_value()) {
      mutable_vector4_value()->::Aeon::Serialize::Vector4::MergeFrom(from.vector4_value());
    }
    if (from.has_matrix4x4_value()) {
      mutable_matrix4x4_value()->::Aeon::Serialize::Matrix4x4::MergeFrom(from.matrix4x4_value());
    }
    if (from.has_range_value()) {
      mutable_range_value()->::Aeon::Serialize::Range::MergeFrom(from.range_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  
  if (has_quaternion_value()) {
    if (!this->quaternion_value().IsInitialized()) return false;
  }
  if (has_vector2_value()) {
    if (!this->vector2_value().IsInitialized()) return false;
  }
  if (has_vector3_value()) {
    if (!this->vector3_value().IsInitialized()) return false;
  }
  if (has_vector4_value()) {
    if (!this->vector4_value().IsInitialized()) return false;
  }
  if (has_matrix4x4_value()) {
    if (!this->matrix4x4_value().IsInitialized()) return false;
  }
  if (has_range_value()) {
    if (!this->range_value().IsInitialized()) return false;
  }
  return true;
}

void Value::Swap(Value* other) {
  if (other != this) {
    std::swap(blob_value_, other->blob_value_);
    std::swap(boolean_value_, other->boolean_value_);
    std::swap(double_value_, other->double_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(int_value_, other->int_value_);
    std::swap(long_value_, other->long_value_);
    std::swap(quaternion_value_, other->quaternion_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(vector2_value_, other->vector2_value_);
    std::swap(vector3_value_, other->vector3_value_);
    std::swap(vector4_value_, other->vector4_value_);
    std::swap(matrix4x4_value_, other->matrix4x4_value_);
    std::swap(range_value_, other->range_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serialize
}  // namespace Aeon

// @@protoc_insertion_point(global_scope)
